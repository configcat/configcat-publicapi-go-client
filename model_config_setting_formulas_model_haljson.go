/*
ConfigCat Public Management API

**Base API URL**: https://test-api.configcat.com  If you prefer the swagger documentation, you can find it here: [Swagger UI](https://test-api.configcat.com/swagger).  The purpose of this API is to access the ConfigCat platform programmatically.  You can **Create**, **Read**, **Update** and **Delete** any entities like **Feature Flags, Configs, Environments** or **Products** within ConfigCat.   The API is based on HTTP REST, uses resource-oriented URLs, status codes and supports JSON  and JSON+HAL format. Do not use this API for accessing and evaluating feature flag values. Use the [SDKs instead](https://configcat.com/docs/sdk-reference/overview).   # OpenAPI Specification  The complete specification is publicly available in the following formats:  - [OpenAPI v3](https://test-api.configcat.com/docs/v1/swagger.json) - [Swagger v2](https://test-api.configcat.com/docs/v1/swagger.v2.json)  You can use it to generate client libraries in various languages with [OpenAPI Generator](https://github.com/OpenAPITools/openapi-generator) or [Swagger Codegen](https://swagger.io/tools/swagger-codegen/) to interact with this API.  # Authentication This API uses the [Basic HTTP Authentication Scheme](https://en.wikipedia.org/wiki/Basic_access_authentication).   <!-- ReDoc-Inject: <security-definitions> -->  # Throttling and rate limits All the rate limited API calls are returning information about the current rate limit period in the following HTTP headers:  | Header | Description | | :- | :- | | X-Rate-Limit-Remaining | The maximum number of requests remaining in the current rate limit period. | | X-Rate-Limit-Reset     | The time when the current rate limit period resets.        |  When the rate limit is exceeded by a request, the API returns with a `HTTP 429 - Too many requests` status along with a `Retry-After` HTTP header. 

API version: v1
Contact: support@configcat.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configcatpublicapi

import (
	"encoding/json"
)

// checks if the ConfigSettingFormulasModelHaljson type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfigSettingFormulasModelHaljson{}

// ConfigSettingFormulasModelHaljson struct for ConfigSettingFormulasModelHaljson
type ConfigSettingFormulasModelHaljson struct {
	Embedded *ConfigSettingFormulasModelHaljsonEmbedded `json:"_embedded,omitempty"`
	ReadOnly *bool `json:"readOnly,omitempty"`
	// Evaluation descriptors of each updated Feature Flag and Setting.
	SettingFormulas []ConfigSettingFormulaModel `json:"settingFormulas,omitempty"`
	FeatureFlagLimitations *FeatureFlagLimitations `json:"featureFlagLimitations,omitempty"`
	Links *ConfigSettingFormulasModelHaljsonEmbeddedEnvironmentLinks `json:"_links,omitempty"`
}

// NewConfigSettingFormulasModelHaljson instantiates a new ConfigSettingFormulasModelHaljson object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigSettingFormulasModelHaljson() *ConfigSettingFormulasModelHaljson {
	this := ConfigSettingFormulasModelHaljson{}
	return &this
}

// NewConfigSettingFormulasModelHaljsonWithDefaults instantiates a new ConfigSettingFormulasModelHaljson object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigSettingFormulasModelHaljsonWithDefaults() *ConfigSettingFormulasModelHaljson {
	this := ConfigSettingFormulasModelHaljson{}
	return &this
}

// GetEmbedded returns the Embedded field value if set, zero value otherwise.
func (o *ConfigSettingFormulasModelHaljson) GetEmbedded() ConfigSettingFormulasModelHaljsonEmbedded {
	if o == nil || IsNil(o.Embedded) {
		var ret ConfigSettingFormulasModelHaljsonEmbedded
		return ret
	}
	return *o.Embedded
}

// GetEmbeddedOk returns a tuple with the Embedded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigSettingFormulasModelHaljson) GetEmbeddedOk() (*ConfigSettingFormulasModelHaljsonEmbedded, bool) {
	if o == nil || IsNil(o.Embedded) {
		return nil, false
	}
	return o.Embedded, true
}

// HasEmbedded returns a boolean if a field has been set.
func (o *ConfigSettingFormulasModelHaljson) HasEmbedded() bool {
	if o != nil && !IsNil(o.Embedded) {
		return true
	}

	return false
}

// SetEmbedded gets a reference to the given ConfigSettingFormulasModelHaljsonEmbedded and assigns it to the Embedded field.
func (o *ConfigSettingFormulasModelHaljson) SetEmbedded(v ConfigSettingFormulasModelHaljsonEmbedded) {
	o.Embedded = &v
}

// GetReadOnly returns the ReadOnly field value if set, zero value otherwise.
func (o *ConfigSettingFormulasModelHaljson) GetReadOnly() bool {
	if o == nil || IsNil(o.ReadOnly) {
		var ret bool
		return ret
	}
	return *o.ReadOnly
}

// GetReadOnlyOk returns a tuple with the ReadOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigSettingFormulasModelHaljson) GetReadOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.ReadOnly) {
		return nil, false
	}
	return o.ReadOnly, true
}

// HasReadOnly returns a boolean if a field has been set.
func (o *ConfigSettingFormulasModelHaljson) HasReadOnly() bool {
	if o != nil && !IsNil(o.ReadOnly) {
		return true
	}

	return false
}

// SetReadOnly gets a reference to the given bool and assigns it to the ReadOnly field.
func (o *ConfigSettingFormulasModelHaljson) SetReadOnly(v bool) {
	o.ReadOnly = &v
}

// GetSettingFormulas returns the SettingFormulas field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConfigSettingFormulasModelHaljson) GetSettingFormulas() []ConfigSettingFormulaModel {
	if o == nil {
		var ret []ConfigSettingFormulaModel
		return ret
	}
	return o.SettingFormulas
}

// GetSettingFormulasOk returns a tuple with the SettingFormulas field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConfigSettingFormulasModelHaljson) GetSettingFormulasOk() ([]ConfigSettingFormulaModel, bool) {
	if o == nil || IsNil(o.SettingFormulas) {
		return nil, false
	}
	return o.SettingFormulas, true
}

// HasSettingFormulas returns a boolean if a field has been set.
func (o *ConfigSettingFormulasModelHaljson) HasSettingFormulas() bool {
	if o != nil && IsNil(o.SettingFormulas) {
		return true
	}

	return false
}

// SetSettingFormulas gets a reference to the given []ConfigSettingFormulaModel and assigns it to the SettingFormulas field.
func (o *ConfigSettingFormulasModelHaljson) SetSettingFormulas(v []ConfigSettingFormulaModel) {
	o.SettingFormulas = v
}

// GetFeatureFlagLimitations returns the FeatureFlagLimitations field value if set, zero value otherwise.
func (o *ConfigSettingFormulasModelHaljson) GetFeatureFlagLimitations() FeatureFlagLimitations {
	if o == nil || IsNil(o.FeatureFlagLimitations) {
		var ret FeatureFlagLimitations
		return ret
	}
	return *o.FeatureFlagLimitations
}

// GetFeatureFlagLimitationsOk returns a tuple with the FeatureFlagLimitations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigSettingFormulasModelHaljson) GetFeatureFlagLimitationsOk() (*FeatureFlagLimitations, bool) {
	if o == nil || IsNil(o.FeatureFlagLimitations) {
		return nil, false
	}
	return o.FeatureFlagLimitations, true
}

// HasFeatureFlagLimitations returns a boolean if a field has been set.
func (o *ConfigSettingFormulasModelHaljson) HasFeatureFlagLimitations() bool {
	if o != nil && !IsNil(o.FeatureFlagLimitations) {
		return true
	}

	return false
}

// SetFeatureFlagLimitations gets a reference to the given FeatureFlagLimitations and assigns it to the FeatureFlagLimitations field.
func (o *ConfigSettingFormulasModelHaljson) SetFeatureFlagLimitations(v FeatureFlagLimitations) {
	o.FeatureFlagLimitations = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *ConfigSettingFormulasModelHaljson) GetLinks() ConfigSettingFormulasModelHaljsonEmbeddedEnvironmentLinks {
	if o == nil || IsNil(o.Links) {
		var ret ConfigSettingFormulasModelHaljsonEmbeddedEnvironmentLinks
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigSettingFormulasModelHaljson) GetLinksOk() (*ConfigSettingFormulasModelHaljsonEmbeddedEnvironmentLinks, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *ConfigSettingFormulasModelHaljson) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given ConfigSettingFormulasModelHaljsonEmbeddedEnvironmentLinks and assigns it to the Links field.
func (o *ConfigSettingFormulasModelHaljson) SetLinks(v ConfigSettingFormulasModelHaljsonEmbeddedEnvironmentLinks) {
	o.Links = &v
}

func (o ConfigSettingFormulasModelHaljson) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigSettingFormulasModelHaljson) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Embedded) {
		toSerialize["_embedded"] = o.Embedded
	}
	if !IsNil(o.ReadOnly) {
		toSerialize["readOnly"] = o.ReadOnly
	}
	if o.SettingFormulas != nil {
		toSerialize["settingFormulas"] = o.SettingFormulas
	}
	if !IsNil(o.FeatureFlagLimitations) {
		toSerialize["featureFlagLimitations"] = o.FeatureFlagLimitations
	}
	if !IsNil(o.Links) {
		toSerialize["_links"] = o.Links
	}
	return toSerialize, nil
}

type NullableConfigSettingFormulasModelHaljson struct {
	value *ConfigSettingFormulasModelHaljson
	isSet bool
}

func (v NullableConfigSettingFormulasModelHaljson) Get() *ConfigSettingFormulasModelHaljson {
	return v.value
}

func (v *NullableConfigSettingFormulasModelHaljson) Set(val *ConfigSettingFormulasModelHaljson) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigSettingFormulasModelHaljson) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigSettingFormulasModelHaljson) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigSettingFormulasModelHaljson(val *ConfigSettingFormulasModelHaljson) *NullableConfigSettingFormulasModelHaljson {
	return &NullableConfigSettingFormulasModelHaljson{value: val, isSet: true}
}

func (v NullableConfigSettingFormulasModelHaljson) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigSettingFormulasModelHaljson) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


