/*
ConfigCat Public Management API

The purpose of this API is to access the ConfigCat platform programmatically. You can **Create**, **Read**, **Update** and **Delete** any entities like **Feature Flags, Configs, Environments** or **Products** within ConfigCat.  **Base API URL**: https://test-api.configcat.com  If you prefer the swagger documentation, you can find it here: [Swagger UI](https://test-api.configcat.com/swagger).  The API is based on HTTP REST, uses resource-oriented URLs, status codes and supports JSON  format. Do not use this API for accessing and evaluating feature flag values. Use the [SDKs instead](https://configcat.com/docs/sdk-reference/overview).   # OpenAPI Specification  The complete specification is publicly available in the following formats:  - [OpenAPI v3](https://test-api.configcat.com/docs/v1/swagger.json) - [Swagger v2](https://test-api.configcat.com/docs/v1/swagger.v2.json)  You can use it to generate client libraries in various languages with [OpenAPI Generator](https://github.com/OpenAPITools/openapi-generator) or [Swagger Codegen](https://swagger.io/tools/swagger-codegen/) to interact with this API.  # Authentication This API uses the [Basic HTTP Authentication Scheme](https://en.wikipedia.org/wiki/Basic_access_authentication).   <!-- ReDoc-Inject: <security-definitions> -->  # Throttling and rate limits All the rate limited API calls are returning information about the current rate limit period in the following HTTP headers:  | Header | Description | | :- | :- | | X-Rate-Limit-Remaining | The maximum number of requests remaining in the current rate limit period. | | X-Rate-Limit-Reset     | The time when the current rate limit period resets.        |  When the rate limit is exceeded by a request, the API returns with a `HTTP 429 - Too many requests` status along with a `Retry-After` HTTP header. 

API version: v1
Contact: support@configcat.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configcatpublicapi

import (
	"encoding/json"
)

// checks if the CreateWebHookRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateWebHookRequest{}

// CreateWebHookRequest struct for CreateWebHookRequest
type CreateWebHookRequest struct {
	// The URL of the Webhook.
	Url string `json:"url"`
	// The HTTP body content.
	Content NullableString `json:"content,omitempty"`
	HttpMethod *WebHookHttpMethod `json:"httpMethod,omitempty"`
	// List of HTTP headers.
	WebHookHeaders []WebhookHeaderModel `json:"webHookHeaders,omitempty"`
}

// NewCreateWebHookRequest instantiates a new CreateWebHookRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateWebHookRequest(url string) *CreateWebHookRequest {
	this := CreateWebHookRequest{}
	this.Url = url
	return &this
}

// NewCreateWebHookRequestWithDefaults instantiates a new CreateWebHookRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateWebHookRequestWithDefaults() *CreateWebHookRequest {
	this := CreateWebHookRequest{}
	return &this
}

// GetUrl returns the Url field value
func (o *CreateWebHookRequest) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *CreateWebHookRequest) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *CreateWebHookRequest) SetUrl(v string) {
	o.Url = v
}

// GetContent returns the Content field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateWebHookRequest) GetContent() string {
	if o == nil || IsNil(o.Content.Get()) {
		var ret string
		return ret
	}
	return *o.Content.Get()
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateWebHookRequest) GetContentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Content.Get(), o.Content.IsSet()
}

// HasContent returns a boolean if a field has been set.
func (o *CreateWebHookRequest) HasContent() bool {
	if o != nil && o.Content.IsSet() {
		return true
	}

	return false
}

// SetContent gets a reference to the given NullableString and assigns it to the Content field.
func (o *CreateWebHookRequest) SetContent(v string) {
	o.Content.Set(&v)
}
// SetContentNil sets the value for Content to be an explicit nil
func (o *CreateWebHookRequest) SetContentNil() {
	o.Content.Set(nil)
}

// UnsetContent ensures that no value is present for Content, not even an explicit nil
func (o *CreateWebHookRequest) UnsetContent() {
	o.Content.Unset()
}

// GetHttpMethod returns the HttpMethod field value if set, zero value otherwise.
func (o *CreateWebHookRequest) GetHttpMethod() WebHookHttpMethod {
	if o == nil || IsNil(o.HttpMethod) {
		var ret WebHookHttpMethod
		return ret
	}
	return *o.HttpMethod
}

// GetHttpMethodOk returns a tuple with the HttpMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateWebHookRequest) GetHttpMethodOk() (*WebHookHttpMethod, bool) {
	if o == nil || IsNil(o.HttpMethod) {
		return nil, false
	}
	return o.HttpMethod, true
}

// HasHttpMethod returns a boolean if a field has been set.
func (o *CreateWebHookRequest) HasHttpMethod() bool {
	if o != nil && !IsNil(o.HttpMethod) {
		return true
	}

	return false
}

// SetHttpMethod gets a reference to the given WebHookHttpMethod and assigns it to the HttpMethod field.
func (o *CreateWebHookRequest) SetHttpMethod(v WebHookHttpMethod) {
	o.HttpMethod = &v
}

// GetWebHookHeaders returns the WebHookHeaders field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateWebHookRequest) GetWebHookHeaders() []WebhookHeaderModel {
	if o == nil {
		var ret []WebhookHeaderModel
		return ret
	}
	return o.WebHookHeaders
}

// GetWebHookHeadersOk returns a tuple with the WebHookHeaders field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateWebHookRequest) GetWebHookHeadersOk() ([]WebhookHeaderModel, bool) {
	if o == nil || IsNil(o.WebHookHeaders) {
		return nil, false
	}
	return o.WebHookHeaders, true
}

// HasWebHookHeaders returns a boolean if a field has been set.
func (o *CreateWebHookRequest) HasWebHookHeaders() bool {
	if o != nil && IsNil(o.WebHookHeaders) {
		return true
	}

	return false
}

// SetWebHookHeaders gets a reference to the given []WebhookHeaderModel and assigns it to the WebHookHeaders field.
func (o *CreateWebHookRequest) SetWebHookHeaders(v []WebhookHeaderModel) {
	o.WebHookHeaders = v
}

func (o CreateWebHookRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateWebHookRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["url"] = o.Url
	if o.Content.IsSet() {
		toSerialize["content"] = o.Content.Get()
	}
	if !IsNil(o.HttpMethod) {
		toSerialize["httpMethod"] = o.HttpMethod
	}
	if o.WebHookHeaders != nil {
		toSerialize["webHookHeaders"] = o.WebHookHeaders
	}
	return toSerialize, nil
}

type NullableCreateWebHookRequest struct {
	value *CreateWebHookRequest
	isSet bool
}

func (v NullableCreateWebHookRequest) Get() *CreateWebHookRequest {
	return v.value
}

func (v *NullableCreateWebHookRequest) Set(val *CreateWebHookRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateWebHookRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateWebHookRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateWebHookRequest(val *CreateWebHookRequest) *NullableCreateWebHookRequest {
	return &NullableCreateWebHookRequest{value: val, isSet: true}
}

func (v NullableCreateWebHookRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateWebHookRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


