/*
 * ConfigCat Public Management API
 *
 * **Base API URL**: https://api.configcat.com  If you prefer the swagger documentation, you can find it here: [Swagger UI](https://api.configcat.com/swagger).  The purpose of this API is to access the ConfigCat platform programmatically.  You can **Create**, **Read**, **Update** and **Delete** any entities like **Feature Flags, Configs, Environments** or **Products** within ConfigCat.   The API is based on HTTP REST, uses resource-oriented URLs, status codes and supports JSON  and JSON+HAL format. Do not use this API for accessing and evaluating feature flag values. Use the [SDKs instead](https://configcat.com/docs/sdk-reference/overview).   # OpenAPI Specification  The complete specification is publicly available here: [swagger.json](v1/swagger.json).  You can use it to generate client libraries in various languages with [OpenAPI Generator](https://github.com/OpenAPITools/openapi-generator) or [Swagger Codegen](https://swagger.io/tools/swagger-codegen/) to interact with this API.  # Authentication This API uses the [Basic HTTP Authentication Scheme](https://en.wikipedia.org/wiki/Basic_access_authentication).   <!-- ReDoc-Inject: <security-definitions> -->  # Throttling and rate limits All the rate limited API calls are returning information about the current rate limit period in the following HTTP headers:  | Header | Description | | :- | :- | | X-Rate-Limit-Remaining | The maximum number of requests remaining in the current rate limit period. | | X-Rate-Limit-Reset     | The time when the current rate limit period resets.        |  When the rate limit is exceeded by a request, the API returns with a `HTTP 429 - Too many requests` status along with a `Retry-After` HTTP header. 
 *
 * API version: v1
 * Contact: support@configcat.com
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package configcatpublicapi

type CodeReferenceRequest struct {
	// The Config's identifier the scanning was performed against.
	ConfigId string `json:"configId"`
	// The source control repository that contains the scanned code. (Source of the repository selector on the ConfigCat Dashboard)
	Repository string `json:"repository"`
	// The source control branch on where the scan was performed. (Source of the branch selector on the ConfigCat Dashboard)
	Branch string `json:"branch"`
	// The related commit's URL. (Appears on the ConfigCat Dashboard)
	CommitUrl string `json:"commitUrl,omitempty"`
	// The related commit's hash. (Appears on the ConfigCat Dashboard)
	CommitHash string `json:"commitHash,omitempty"`
	// The scanning tool's name. (Appears on the ConfigCat Dashboard)
	Uploader string `json:"uploader,omitempty"`
	// The currently active branches of the repository. Each previously uploaded report that belongs to a non-reported active branch is being deleted.
	ActiveBranches []string `json:"activeBranches,omitempty"`
	// The actual code reference collection.
	FlagReferences []FlagReference `json:"flagReferences,omitempty"`
}
