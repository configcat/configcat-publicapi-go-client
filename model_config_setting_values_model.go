/*
ConfigCat Public Management API

**Base API URL**: https://api.configcat.com  If you prefer the swagger documentation, you can find it here: [Swagger UI](https://api.configcat.com/swagger).  The purpose of this API is to access the ConfigCat platform programmatically.  You can **Create**, **Read**, **Update** and **Delete** any entities like **Feature Flags, Configs, Environments** or **Products** within ConfigCat.   The API is based on HTTP REST, uses resource-oriented URLs, status codes and supports JSON  and JSON+HAL format. Do not use this API for accessing and evaluating feature flag values. Use the [SDKs instead](https://configcat.com/docs/sdk-reference/overview).   # OpenAPI Specification  The complete specification is publicly available here: [swagger.json](v1/swagger.json).  You can use it to generate client libraries in various languages with [OpenAPI Generator](https://github.com/OpenAPITools/openapi-generator) or [Swagger Codegen](https://swagger.io/tools/swagger-codegen/) to interact with this API.  # Authentication This API uses the [Basic HTTP Authentication Scheme](https://en.wikipedia.org/wiki/Basic_access_authentication).   <!-- ReDoc-Inject: <security-definitions> -->  # Throttling and rate limits All the rate limited API calls are returning information about the current rate limit period in the following HTTP headers:  | Header | Description | | :- | :- | | X-Rate-Limit-Remaining | The maximum number of requests remaining in the current rate limit period. | | X-Rate-Limit-Reset     | The time when the current rate limit period resets.        |  When the rate limit is exceeded by a request, the API returns with a `HTTP 429 - Too many requests` status along with a `Retry-After` HTTP header. 

API version: v1
Contact: support@configcat.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configcatpublicapi

import (
	"encoding/json"
)

// checks if the ConfigSettingValuesModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfigSettingValuesModel{}

// ConfigSettingValuesModel struct for ConfigSettingValuesModel
type ConfigSettingValuesModel struct {
	Config *ConfigModel `json:"config,omitempty"`
	Environment *EnvironmentModel `json:"environment,omitempty"`
	ReadOnly *bool `json:"readOnly,omitempty"`
	SettingValues []ConfigSettingValueModel `json:"settingValues,omitempty"`
}

// NewConfigSettingValuesModel instantiates a new ConfigSettingValuesModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigSettingValuesModel() *ConfigSettingValuesModel {
	this := ConfigSettingValuesModel{}
	return &this
}

// NewConfigSettingValuesModelWithDefaults instantiates a new ConfigSettingValuesModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigSettingValuesModelWithDefaults() *ConfigSettingValuesModel {
	this := ConfigSettingValuesModel{}
	return &this
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *ConfigSettingValuesModel) GetConfig() ConfigModel {
	if o == nil || IsNil(o.Config) {
		var ret ConfigModel
		return ret
	}
	return *o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigSettingValuesModel) GetConfigOk() (*ConfigModel, bool) {
	if o == nil || IsNil(o.Config) {
		return nil, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *ConfigSettingValuesModel) HasConfig() bool {
	if o != nil && !IsNil(o.Config) {
		return true
	}

	return false
}

// SetConfig gets a reference to the given ConfigModel and assigns it to the Config field.
func (o *ConfigSettingValuesModel) SetConfig(v ConfigModel) {
	o.Config = &v
}

// GetEnvironment returns the Environment field value if set, zero value otherwise.
func (o *ConfigSettingValuesModel) GetEnvironment() EnvironmentModel {
	if o == nil || IsNil(o.Environment) {
		var ret EnvironmentModel
		return ret
	}
	return *o.Environment
}

// GetEnvironmentOk returns a tuple with the Environment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigSettingValuesModel) GetEnvironmentOk() (*EnvironmentModel, bool) {
	if o == nil || IsNil(o.Environment) {
		return nil, false
	}
	return o.Environment, true
}

// HasEnvironment returns a boolean if a field has been set.
func (o *ConfigSettingValuesModel) HasEnvironment() bool {
	if o != nil && !IsNil(o.Environment) {
		return true
	}

	return false
}

// SetEnvironment gets a reference to the given EnvironmentModel and assigns it to the Environment field.
func (o *ConfigSettingValuesModel) SetEnvironment(v EnvironmentModel) {
	o.Environment = &v
}

// GetReadOnly returns the ReadOnly field value if set, zero value otherwise.
func (o *ConfigSettingValuesModel) GetReadOnly() bool {
	if o == nil || IsNil(o.ReadOnly) {
		var ret bool
		return ret
	}
	return *o.ReadOnly
}

// GetReadOnlyOk returns a tuple with the ReadOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigSettingValuesModel) GetReadOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.ReadOnly) {
		return nil, false
	}
	return o.ReadOnly, true
}

// HasReadOnly returns a boolean if a field has been set.
func (o *ConfigSettingValuesModel) HasReadOnly() bool {
	if o != nil && !IsNil(o.ReadOnly) {
		return true
	}

	return false
}

// SetReadOnly gets a reference to the given bool and assigns it to the ReadOnly field.
func (o *ConfigSettingValuesModel) SetReadOnly(v bool) {
	o.ReadOnly = &v
}

// GetSettingValues returns the SettingValues field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConfigSettingValuesModel) GetSettingValues() []ConfigSettingValueModel {
	if o == nil {
		var ret []ConfigSettingValueModel
		return ret
	}
	return o.SettingValues
}

// GetSettingValuesOk returns a tuple with the SettingValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConfigSettingValuesModel) GetSettingValuesOk() ([]ConfigSettingValueModel, bool) {
	if o == nil || IsNil(o.SettingValues) {
		return nil, false
	}
	return o.SettingValues, true
}

// HasSettingValues returns a boolean if a field has been set.
func (o *ConfigSettingValuesModel) HasSettingValues() bool {
	if o != nil && IsNil(o.SettingValues) {
		return true
	}

	return false
}

// SetSettingValues gets a reference to the given []ConfigSettingValueModel and assigns it to the SettingValues field.
func (o *ConfigSettingValuesModel) SetSettingValues(v []ConfigSettingValueModel) {
	o.SettingValues = v
}

func (o ConfigSettingValuesModel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigSettingValuesModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Config) {
		toSerialize["config"] = o.Config
	}
	if !IsNil(o.Environment) {
		toSerialize["environment"] = o.Environment
	}
	if !IsNil(o.ReadOnly) {
		toSerialize["readOnly"] = o.ReadOnly
	}
	if o.SettingValues != nil {
		toSerialize["settingValues"] = o.SettingValues
	}
	return toSerialize, nil
}

type NullableConfigSettingValuesModel struct {
	value *ConfigSettingValuesModel
	isSet bool
}

func (v NullableConfigSettingValuesModel) Get() *ConfigSettingValuesModel {
	return v.value
}

func (v *NullableConfigSettingValuesModel) Set(val *ConfigSettingValuesModel) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigSettingValuesModel) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigSettingValuesModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigSettingValuesModel(val *ConfigSettingValuesModel) *NullableConfigSettingValuesModel {
	return &NullableConfigSettingValuesModel{value: val, isSet: true}
}

func (v NullableConfigSettingValuesModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigSettingValuesModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


