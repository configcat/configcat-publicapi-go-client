/*
ConfigCat Public Management API

The purpose of this API is to access the ConfigCat platform programmatically. You can **Create**, **Read**, **Update** and **Delete** any entities like **Feature Flags, Configs, Environments** or **Products** within ConfigCat.  **Base API URL**: https://test-api.configcat.com  If you prefer the swagger documentation, you can find it here: [Swagger UI](https://test-api.configcat.com/swagger).  The API is based on HTTP REST, uses resource-oriented URLs, status codes and supports JSON  format.   **Important:** Do not use this API for accessing and evaluating feature flag values. Use the [SDKs](https://configcat.com/docs/sdk-reference/overview) or the [ConfigCat Proxy](https://configcat.com/docs/advanced/proxy/proxy-overview/) instead.  # OpenAPI Specification  The complete specification is publicly available in the following formats:  - [OpenAPI v3](https://test-api.configcat.com/docs/v1/swagger.json) - [Swagger v2](https://test-api.configcat.com/docs/v1/swagger.v2.json)  You can use it to generate client libraries in various languages with [OpenAPI Generator](https://github.com/OpenAPITools/openapi-generator) or [Swagger Codegen](https://swagger.io/tools/swagger-codegen/) to interact with this API.  # Authentication This API uses the [Basic HTTP Authentication Scheme](https://en.wikipedia.org/wiki/Basic_access_authentication).   <!-- ReDoc-Inject: <security-definitions> -->  # Throttling and rate limits All the rate limited API calls are returning information about the current rate limit period in the following HTTP headers:  | Header | Description | | :- | :- | | X-Rate-Limit-Remaining | The maximum number of requests remaining in the current rate limit period. | | X-Rate-Limit-Reset     | The time when the current rate limit period resets.        |  When the rate limit is exceeded by a request, the API returns with a `HTTP 429 - Too many requests` status along with a `Retry-After` HTTP header. 

API version: v1
Contact: support@configcat.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configcatpublicapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// PermissionGroupsAPIService PermissionGroupsAPI service
type PermissionGroupsAPIService service

type PermissionGroupsAPICreatePermissionGroupRequest struct {
	ctx context.Context
	ApiService *PermissionGroupsAPIService
	productId string
	createPermissionGroupRequest *CreatePermissionGroupRequest
}

func (r PermissionGroupsAPICreatePermissionGroupRequest) CreatePermissionGroupRequest(createPermissionGroupRequest CreatePermissionGroupRequest) PermissionGroupsAPICreatePermissionGroupRequest {
	r.createPermissionGroupRequest = &createPermissionGroupRequest
	return r
}

func (r PermissionGroupsAPICreatePermissionGroupRequest) Execute() (*PermissionGroupModel, *http.Response, error) {
	return r.ApiService.CreatePermissionGroupExecute(r)
}

/*
CreatePermissionGroup Create Permission Group

This endpoint creates a new Permission Group in a specified Product 
identified by the `productId` parameter, which can be obtained from the [List Products](#operation/get-products) endpoint.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param productId The identifier of the Product.
 @return PermissionGroupsAPICreatePermissionGroupRequest
*/
func (a *PermissionGroupsAPIService) CreatePermissionGroup(ctx context.Context, productId string) PermissionGroupsAPICreatePermissionGroupRequest {
	return PermissionGroupsAPICreatePermissionGroupRequest{
		ApiService: a,
		ctx: ctx,
		productId: productId,
	}
}

// Execute executes the request
//  @return PermissionGroupModel
func (a *PermissionGroupsAPIService) CreatePermissionGroupExecute(r PermissionGroupsAPICreatePermissionGroupRequest) (*PermissionGroupModel, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PermissionGroupModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PermissionGroupsAPIService.CreatePermissionGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/products/{productId}/permissions"
	localVarPath = strings.Replace(localVarPath, "{"+"productId"+"}", url.PathEscape(parameterValueToString(r.productId, "productId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createPermissionGroupRequest == nil {
		return localVarReturnValue, nil, reportError("createPermissionGroupRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createPermissionGroupRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type PermissionGroupsAPIDeletePermissionGroupRequest struct {
	ctx context.Context
	ApiService *PermissionGroupsAPIService
	permissionGroupId int64
}

func (r PermissionGroupsAPIDeletePermissionGroupRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeletePermissionGroupExecute(r)
}

/*
DeletePermissionGroup Delete Permission Group

This endpoint removes a Permission Group identified by the `permissionGroupId` parameter.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param permissionGroupId The identifier of the Permission Group.
 @return PermissionGroupsAPIDeletePermissionGroupRequest
*/
func (a *PermissionGroupsAPIService) DeletePermissionGroup(ctx context.Context, permissionGroupId int64) PermissionGroupsAPIDeletePermissionGroupRequest {
	return PermissionGroupsAPIDeletePermissionGroupRequest{
		ApiService: a,
		ctx: ctx,
		permissionGroupId: permissionGroupId,
	}
}

// Execute executes the request
func (a *PermissionGroupsAPIService) DeletePermissionGroupExecute(r PermissionGroupsAPIDeletePermissionGroupRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PermissionGroupsAPIService.DeletePermissionGroup")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/permissions/{permissionGroupId}"
	localVarPath = strings.Replace(localVarPath, "{"+"permissionGroupId"+"}", url.PathEscape(parameterValueToString(r.permissionGroupId, "permissionGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type PermissionGroupsAPIGetPermissionGroupRequest struct {
	ctx context.Context
	ApiService *PermissionGroupsAPIService
	permissionGroupId int64
}

func (r PermissionGroupsAPIGetPermissionGroupRequest) Execute() (*PermissionGroupModel, *http.Response, error) {
	return r.ApiService.GetPermissionGroupExecute(r)
}

/*
GetPermissionGroup Get Permission Group

This endpoint returns the metadata of a Permission Group 
identified by the `permissionGroupId`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param permissionGroupId The identifier of the Permission Group.
 @return PermissionGroupsAPIGetPermissionGroupRequest
*/
func (a *PermissionGroupsAPIService) GetPermissionGroup(ctx context.Context, permissionGroupId int64) PermissionGroupsAPIGetPermissionGroupRequest {
	return PermissionGroupsAPIGetPermissionGroupRequest{
		ApiService: a,
		ctx: ctx,
		permissionGroupId: permissionGroupId,
	}
}

// Execute executes the request
//  @return PermissionGroupModel
func (a *PermissionGroupsAPIService) GetPermissionGroupExecute(r PermissionGroupsAPIGetPermissionGroupRequest) (*PermissionGroupModel, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PermissionGroupModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PermissionGroupsAPIService.GetPermissionGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/permissions/{permissionGroupId}"
	localVarPath = strings.Replace(localVarPath, "{"+"permissionGroupId"+"}", url.PathEscape(parameterValueToString(r.permissionGroupId, "permissionGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type PermissionGroupsAPIGetPermissionGroupsRequest struct {
	ctx context.Context
	ApiService *PermissionGroupsAPIService
	productId string
}

func (r PermissionGroupsAPIGetPermissionGroupsRequest) Execute() ([]PermissionGroupModel, *http.Response, error) {
	return r.ApiService.GetPermissionGroupsExecute(r)
}

/*
GetPermissionGroups List Permission Groups

This endpoint returns the list of the Permission Groups that belongs to the given Product identified by the
`productId` parameter, which can be obtained from the [List Products](#operation/get-products) endpoint.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param productId The identifier of the Product.
 @return PermissionGroupsAPIGetPermissionGroupsRequest
*/
func (a *PermissionGroupsAPIService) GetPermissionGroups(ctx context.Context, productId string) PermissionGroupsAPIGetPermissionGroupsRequest {
	return PermissionGroupsAPIGetPermissionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		productId: productId,
	}
}

// Execute executes the request
//  @return []PermissionGroupModel
func (a *PermissionGroupsAPIService) GetPermissionGroupsExecute(r PermissionGroupsAPIGetPermissionGroupsRequest) ([]PermissionGroupModel, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []PermissionGroupModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PermissionGroupsAPIService.GetPermissionGroups")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/products/{productId}/permissions"
	localVarPath = strings.Replace(localVarPath, "{"+"productId"+"}", url.PathEscape(parameterValueToString(r.productId, "productId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type PermissionGroupsAPIUpdatePermissionGroupRequest struct {
	ctx context.Context
	ApiService *PermissionGroupsAPIService
	permissionGroupId int64
	updatePermissionGroupRequest *UpdatePermissionGroupRequest
}

func (r PermissionGroupsAPIUpdatePermissionGroupRequest) UpdatePermissionGroupRequest(updatePermissionGroupRequest UpdatePermissionGroupRequest) PermissionGroupsAPIUpdatePermissionGroupRequest {
	r.updatePermissionGroupRequest = &updatePermissionGroupRequest
	return r
}

func (r PermissionGroupsAPIUpdatePermissionGroupRequest) Execute() (*PermissionGroupModel, *http.Response, error) {
	return r.ApiService.UpdatePermissionGroupExecute(r)
}

/*
UpdatePermissionGroup Update Permission Group

This endpoint updates a Permission Group identified by the `permissionGroupId` parameter.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param permissionGroupId The identifier of the Permission Group.
 @return PermissionGroupsAPIUpdatePermissionGroupRequest
*/
func (a *PermissionGroupsAPIService) UpdatePermissionGroup(ctx context.Context, permissionGroupId int64) PermissionGroupsAPIUpdatePermissionGroupRequest {
	return PermissionGroupsAPIUpdatePermissionGroupRequest{
		ApiService: a,
		ctx: ctx,
		permissionGroupId: permissionGroupId,
	}
}

// Execute executes the request
//  @return PermissionGroupModel
func (a *PermissionGroupsAPIService) UpdatePermissionGroupExecute(r PermissionGroupsAPIUpdatePermissionGroupRequest) (*PermissionGroupModel, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PermissionGroupModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PermissionGroupsAPIService.UpdatePermissionGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/permissions/{permissionGroupId}"
	localVarPath = strings.Replace(localVarPath, "{"+"permissionGroupId"+"}", url.PathEscape(parameterValueToString(r.permissionGroupId, "permissionGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updatePermissionGroupRequest == nil {
		return localVarReturnValue, nil, reportError("updatePermissionGroupRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updatePermissionGroupRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
