/*
ConfigCat Public Management API

**Base API URL**: https://api.configcat.com  If you prefer the swagger documentation, you can find it here: [Swagger UI](https://api.configcat.com/swagger).  The purpose of this API is to access the ConfigCat platform programmatically.  You can **Create**, **Read**, **Update** and **Delete** any entities like **Feature Flags, Configs, Environments** or **Products** within ConfigCat.   The API is based on HTTP REST, uses resource-oriented URLs, status codes and supports JSON  and JSON+HAL format. Do not use this API for accessing and evaluating feature flag values. Use the [SDKs instead](https://configcat.com/docs/sdk-reference/overview).   # OpenAPI Specification  The complete specification is publicly available here: [swagger.json](v1/swagger.json).  You can use it to generate client libraries in various languages with [OpenAPI Generator](https://github.com/OpenAPITools/openapi-generator) or [Swagger Codegen](https://swagger.io/tools/swagger-codegen/) to interact with this API.  # Authentication This API uses the [Basic HTTP Authentication Scheme](https://en.wikipedia.org/wiki/Basic_access_authentication).   <!-- ReDoc-Inject: <security-definitions> -->  # Throttling and rate limits All the rate limited API calls are returning information about the current rate limit period in the following HTTP headers:  | Header | Description | | :- | :- | | X-Rate-Limit-Remaining | The maximum number of requests remaining in the current rate limit period. | | X-Rate-Limit-Reset     | The time when the current rate limit period resets.        |  When the rate limit is exceeded by a request, the API returns with a `HTTP 429 - Too many requests` status along with a `Retry-After` HTTP header. 

API version: v1
Contact: support@configcat.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configcatpublicapi

import (
	"encoding/json"
)

// checks if the TagModelHaljson type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TagModelHaljson{}

// TagModelHaljson struct for TagModelHaljson
type TagModelHaljson struct {
	Embedded *ConfigModelHaljsonEmbedded `json:"_embedded,omitempty"`
	TagId *int64 `json:"tagId,omitempty"`
	Name NullableString `json:"name,omitempty"`
	Color NullableString `json:"color,omitempty"`
	Links *EnvironmentModelHaljsonLinks `json:"_links,omitempty"`
}

// NewTagModelHaljson instantiates a new TagModelHaljson object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTagModelHaljson() *TagModelHaljson {
	this := TagModelHaljson{}
	return &this
}

// NewTagModelHaljsonWithDefaults instantiates a new TagModelHaljson object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTagModelHaljsonWithDefaults() *TagModelHaljson {
	this := TagModelHaljson{}
	return &this
}

// GetEmbedded returns the Embedded field value if set, zero value otherwise.
func (o *TagModelHaljson) GetEmbedded() ConfigModelHaljsonEmbedded {
	if o == nil || IsNil(o.Embedded) {
		var ret ConfigModelHaljsonEmbedded
		return ret
	}
	return *o.Embedded
}

// GetEmbeddedOk returns a tuple with the Embedded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TagModelHaljson) GetEmbeddedOk() (*ConfigModelHaljsonEmbedded, bool) {
	if o == nil || IsNil(o.Embedded) {
		return nil, false
	}
	return o.Embedded, true
}

// HasEmbedded returns a boolean if a field has been set.
func (o *TagModelHaljson) HasEmbedded() bool {
	if o != nil && !IsNil(o.Embedded) {
		return true
	}

	return false
}

// SetEmbedded gets a reference to the given ConfigModelHaljsonEmbedded and assigns it to the Embedded field.
func (o *TagModelHaljson) SetEmbedded(v ConfigModelHaljsonEmbedded) {
	o.Embedded = &v
}

// GetTagId returns the TagId field value if set, zero value otherwise.
func (o *TagModelHaljson) GetTagId() int64 {
	if o == nil || IsNil(o.TagId) {
		var ret int64
		return ret
	}
	return *o.TagId
}

// GetTagIdOk returns a tuple with the TagId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TagModelHaljson) GetTagIdOk() (*int64, bool) {
	if o == nil || IsNil(o.TagId) {
		return nil, false
	}
	return o.TagId, true
}

// HasTagId returns a boolean if a field has been set.
func (o *TagModelHaljson) HasTagId() bool {
	if o != nil && !IsNil(o.TagId) {
		return true
	}

	return false
}

// SetTagId gets a reference to the given int64 and assigns it to the TagId field.
func (o *TagModelHaljson) SetTagId(v int64) {
	o.TagId = &v
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TagModelHaljson) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TagModelHaljson) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *TagModelHaljson) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *TagModelHaljson) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *TagModelHaljson) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *TagModelHaljson) UnsetName() {
	o.Name.Unset()
}

// GetColor returns the Color field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TagModelHaljson) GetColor() string {
	if o == nil || IsNil(o.Color.Get()) {
		var ret string
		return ret
	}
	return *o.Color.Get()
}

// GetColorOk returns a tuple with the Color field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TagModelHaljson) GetColorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Color.Get(), o.Color.IsSet()
}

// HasColor returns a boolean if a field has been set.
func (o *TagModelHaljson) HasColor() bool {
	if o != nil && o.Color.IsSet() {
		return true
	}

	return false
}

// SetColor gets a reference to the given NullableString and assigns it to the Color field.
func (o *TagModelHaljson) SetColor(v string) {
	o.Color.Set(&v)
}
// SetColorNil sets the value for Color to be an explicit nil
func (o *TagModelHaljson) SetColorNil() {
	o.Color.Set(nil)
}

// UnsetColor ensures that no value is present for Color, not even an explicit nil
func (o *TagModelHaljson) UnsetColor() {
	o.Color.Unset()
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *TagModelHaljson) GetLinks() EnvironmentModelHaljsonLinks {
	if o == nil || IsNil(o.Links) {
		var ret EnvironmentModelHaljsonLinks
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TagModelHaljson) GetLinksOk() (*EnvironmentModelHaljsonLinks, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *TagModelHaljson) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given EnvironmentModelHaljsonLinks and assigns it to the Links field.
func (o *TagModelHaljson) SetLinks(v EnvironmentModelHaljsonLinks) {
	o.Links = &v
}

func (o TagModelHaljson) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TagModelHaljson) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Embedded) {
		toSerialize["_embedded"] = o.Embedded
	}
	if !IsNil(o.TagId) {
		toSerialize["tagId"] = o.TagId
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Color.IsSet() {
		toSerialize["color"] = o.Color.Get()
	}
	if !IsNil(o.Links) {
		toSerialize["_links"] = o.Links
	}
	return toSerialize, nil
}

type NullableTagModelHaljson struct {
	value *TagModelHaljson
	isSet bool
}

func (v NullableTagModelHaljson) Get() *TagModelHaljson {
	return v.value
}

func (v *NullableTagModelHaljson) Set(val *TagModelHaljson) {
	v.value = val
	v.isSet = true
}

func (v NullableTagModelHaljson) IsSet() bool {
	return v.isSet
}

func (v *NullableTagModelHaljson) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTagModelHaljson(val *TagModelHaljson) *NullableTagModelHaljson {
	return &NullableTagModelHaljson{value: val, isSet: true}
}

func (v NullableTagModelHaljson) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTagModelHaljson) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


