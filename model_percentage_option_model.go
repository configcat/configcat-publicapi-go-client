/*
ConfigCat Public Management API

The purpose of this API is to access the ConfigCat platform programmatically. You can **Create**, **Read**, **Update** and **Delete** any entities like **Feature Flags, Configs, Environments** or **Products** within ConfigCat.  **Base API URL**: https://test-api.configcat.com  If you prefer the swagger documentation, you can find it here: [Swagger UI](https://test-api.configcat.com/swagger).  The API is based on HTTP REST, uses resource-oriented URLs, status codes and supports JSON  format. Do not use this API for accessing and evaluating feature flag values. Use the [SDKs instead](https://configcat.com/docs/sdk-reference/overview).   # OpenAPI Specification  The complete specification is publicly available in the following formats:  - [OpenAPI v3](https://test-api.configcat.com/docs/v1/swagger.json) - [Swagger v2](https://test-api.configcat.com/docs/v1/swagger.v2.json)  You can use it to generate client libraries in various languages with [OpenAPI Generator](https://github.com/OpenAPITools/openapi-generator) or [Swagger Codegen](https://swagger.io/tools/swagger-codegen/) to interact with this API.  # Authentication This API uses the [Basic HTTP Authentication Scheme](https://en.wikipedia.org/wiki/Basic_access_authentication).   <!-- ReDoc-Inject: <security-definitions> -->  # Throttling and rate limits All the rate limited API calls are returning information about the current rate limit period in the following HTTP headers:  | Header | Description | | :- | :- | | X-Rate-Limit-Remaining | The maximum number of requests remaining in the current rate limit period. | | X-Rate-Limit-Reset     | The time when the current rate limit period resets.        |  When the rate limit is exceeded by a request, the API returns with a `HTTP 429 - Too many requests` status along with a `Retry-After` HTTP header. 

API version: v1
Contact: support@configcat.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configcatpublicapi

import (
	"encoding/json"
)

// checks if the PercentageOptionModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PercentageOptionModel{}

// PercentageOptionModel struct for PercentageOptionModel
type PercentageOptionModel struct {
	// A number between 0 and 100 that represents a randomly allocated fraction of the users.
	Percentage int32 `json:"percentage"`
	Value ValueModel `json:"value"`
}

// NewPercentageOptionModel instantiates a new PercentageOptionModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPercentageOptionModel(percentage int32, value ValueModel) *PercentageOptionModel {
	this := PercentageOptionModel{}
	this.Percentage = percentage
	this.Value = value
	return &this
}

// NewPercentageOptionModelWithDefaults instantiates a new PercentageOptionModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPercentageOptionModelWithDefaults() *PercentageOptionModel {
	this := PercentageOptionModel{}
	return &this
}

// GetPercentage returns the Percentage field value
func (o *PercentageOptionModel) GetPercentage() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Percentage
}

// GetPercentageOk returns a tuple with the Percentage field value
// and a boolean to check if the value has been set.
func (o *PercentageOptionModel) GetPercentageOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Percentage, true
}

// SetPercentage sets field value
func (o *PercentageOptionModel) SetPercentage(v int32) {
	o.Percentage = v
}

// GetValue returns the Value field value
func (o *PercentageOptionModel) GetValue() ValueModel {
	if o == nil {
		var ret ValueModel
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *PercentageOptionModel) GetValueOk() (*ValueModel, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *PercentageOptionModel) SetValue(v ValueModel) {
	o.Value = v
}

func (o PercentageOptionModel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PercentageOptionModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["percentage"] = o.Percentage
	toSerialize["value"] = o.Value
	return toSerialize, nil
}

type NullablePercentageOptionModel struct {
	value *PercentageOptionModel
	isSet bool
}

func (v NullablePercentageOptionModel) Get() *PercentageOptionModel {
	return v.value
}

func (v *NullablePercentageOptionModel) Set(val *PercentageOptionModel) {
	v.value = val
	v.isSet = true
}

func (v NullablePercentageOptionModel) IsSet() bool {
	return v.isSet
}

func (v *NullablePercentageOptionModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePercentageOptionModel(val *PercentageOptionModel) *NullablePercentageOptionModel {
	return &NullablePercentageOptionModel{value: val, isSet: true}
}

func (v NullablePercentageOptionModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePercentageOptionModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


