/*
ConfigCat Public Management API

The purpose of this API is to access the ConfigCat platform programmatically. You can **Create**, **Read**, **Update** and **Delete** any entities like **Feature Flags, Configs, Environments** or **Products** within ConfigCat.  **Base API URL**: https://test-api.configcat.com  If you prefer the swagger documentation, you can find it here: [Swagger UI](https://test-api.configcat.com/swagger).  The API is based on HTTP REST, uses resource-oriented URLs, status codes and supports JSON  format.   **Important:** Do not use this API for accessing and evaluating feature flag values. Use the [SDKs](https://configcat.com/docs/sdk-reference/overview) or the [ConfigCat Proxy](https://configcat.com/docs/advanced/proxy/proxy-overview/) instead.  # OpenAPI Specification  The complete specification is publicly available in the following formats:  - [OpenAPI v3](https://test-api.configcat.com/docs/v1/swagger.json) - [Swagger v2](https://test-api.configcat.com/docs/v1/swagger.v2.json)  You can use it to generate client libraries in various languages with [OpenAPI Generator](https://github.com/OpenAPITools/openapi-generator) or [Swagger Codegen](https://swagger.io/tools/swagger-codegen/) to interact with this API.  # Authentication This API uses the [Basic HTTP Authentication Scheme](https://en.wikipedia.org/wiki/Basic_access_authentication).   <!-- ReDoc-Inject: <security-definitions> -->  # Throttling and rate limits All the rate limited API calls are returning information about the current rate limit period in the following HTTP headers:  | Header | Description | | :- | :- | | X-Rate-Limit-Remaining | The maximum number of requests remaining in the current rate limit period. | | X-Rate-Limit-Reset     | The time when the current rate limit period resets.        |  When the rate limit is exceeded by a request, the API returns with a `HTTP 429 - Too many requests` status along with a `Retry-After` HTTP header. 

API version: v1
Contact: support@configcat.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configcatpublicapi

import (
	"encoding/json"
)

// checks if the ConfigSettingFormulasModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfigSettingFormulasModel{}

// ConfigSettingFormulasModel struct for ConfigSettingFormulasModel
type ConfigSettingFormulasModel struct {
	Config *ConfigModel `json:"config,omitempty"`
	Environment *EnvironmentModel `json:"environment,omitempty"`
	ReadOnly *bool `json:"readOnly,omitempty"`
	// Evaluation descriptors of each updated Feature Flag and Setting.
	SettingFormulas []ConfigSettingFormulaModel `json:"settingFormulas,omitempty"`
	FeatureFlagLimitations *FeatureFlagLimitations `json:"featureFlagLimitations,omitempty"`
}

// NewConfigSettingFormulasModel instantiates a new ConfigSettingFormulasModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigSettingFormulasModel() *ConfigSettingFormulasModel {
	this := ConfigSettingFormulasModel{}
	return &this
}

// NewConfigSettingFormulasModelWithDefaults instantiates a new ConfigSettingFormulasModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigSettingFormulasModelWithDefaults() *ConfigSettingFormulasModel {
	this := ConfigSettingFormulasModel{}
	return &this
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *ConfigSettingFormulasModel) GetConfig() ConfigModel {
	if o == nil || IsNil(o.Config) {
		var ret ConfigModel
		return ret
	}
	return *o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigSettingFormulasModel) GetConfigOk() (*ConfigModel, bool) {
	if o == nil || IsNil(o.Config) {
		return nil, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *ConfigSettingFormulasModel) HasConfig() bool {
	if o != nil && !IsNil(o.Config) {
		return true
	}

	return false
}

// SetConfig gets a reference to the given ConfigModel and assigns it to the Config field.
func (o *ConfigSettingFormulasModel) SetConfig(v ConfigModel) {
	o.Config = &v
}

// GetEnvironment returns the Environment field value if set, zero value otherwise.
func (o *ConfigSettingFormulasModel) GetEnvironment() EnvironmentModel {
	if o == nil || IsNil(o.Environment) {
		var ret EnvironmentModel
		return ret
	}
	return *o.Environment
}

// GetEnvironmentOk returns a tuple with the Environment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigSettingFormulasModel) GetEnvironmentOk() (*EnvironmentModel, bool) {
	if o == nil || IsNil(o.Environment) {
		return nil, false
	}
	return o.Environment, true
}

// HasEnvironment returns a boolean if a field has been set.
func (o *ConfigSettingFormulasModel) HasEnvironment() bool {
	if o != nil && !IsNil(o.Environment) {
		return true
	}

	return false
}

// SetEnvironment gets a reference to the given EnvironmentModel and assigns it to the Environment field.
func (o *ConfigSettingFormulasModel) SetEnvironment(v EnvironmentModel) {
	o.Environment = &v
}

// GetReadOnly returns the ReadOnly field value if set, zero value otherwise.
func (o *ConfigSettingFormulasModel) GetReadOnly() bool {
	if o == nil || IsNil(o.ReadOnly) {
		var ret bool
		return ret
	}
	return *o.ReadOnly
}

// GetReadOnlyOk returns a tuple with the ReadOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigSettingFormulasModel) GetReadOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.ReadOnly) {
		return nil, false
	}
	return o.ReadOnly, true
}

// HasReadOnly returns a boolean if a field has been set.
func (o *ConfigSettingFormulasModel) HasReadOnly() bool {
	if o != nil && !IsNil(o.ReadOnly) {
		return true
	}

	return false
}

// SetReadOnly gets a reference to the given bool and assigns it to the ReadOnly field.
func (o *ConfigSettingFormulasModel) SetReadOnly(v bool) {
	o.ReadOnly = &v
}

// GetSettingFormulas returns the SettingFormulas field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConfigSettingFormulasModel) GetSettingFormulas() []ConfigSettingFormulaModel {
	if o == nil {
		var ret []ConfigSettingFormulaModel
		return ret
	}
	return o.SettingFormulas
}

// GetSettingFormulasOk returns a tuple with the SettingFormulas field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConfigSettingFormulasModel) GetSettingFormulasOk() ([]ConfigSettingFormulaModel, bool) {
	if o == nil || IsNil(o.SettingFormulas) {
		return nil, false
	}
	return o.SettingFormulas, true
}

// HasSettingFormulas returns a boolean if a field has been set.
func (o *ConfigSettingFormulasModel) HasSettingFormulas() bool {
	if o != nil && !IsNil(o.SettingFormulas) {
		return true
	}

	return false
}

// SetSettingFormulas gets a reference to the given []ConfigSettingFormulaModel and assigns it to the SettingFormulas field.
func (o *ConfigSettingFormulasModel) SetSettingFormulas(v []ConfigSettingFormulaModel) {
	o.SettingFormulas = v
}

// GetFeatureFlagLimitations returns the FeatureFlagLimitations field value if set, zero value otherwise.
func (o *ConfigSettingFormulasModel) GetFeatureFlagLimitations() FeatureFlagLimitations {
	if o == nil || IsNil(o.FeatureFlagLimitations) {
		var ret FeatureFlagLimitations
		return ret
	}
	return *o.FeatureFlagLimitations
}

// GetFeatureFlagLimitationsOk returns a tuple with the FeatureFlagLimitations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigSettingFormulasModel) GetFeatureFlagLimitationsOk() (*FeatureFlagLimitations, bool) {
	if o == nil || IsNil(o.FeatureFlagLimitations) {
		return nil, false
	}
	return o.FeatureFlagLimitations, true
}

// HasFeatureFlagLimitations returns a boolean if a field has been set.
func (o *ConfigSettingFormulasModel) HasFeatureFlagLimitations() bool {
	if o != nil && !IsNil(o.FeatureFlagLimitations) {
		return true
	}

	return false
}

// SetFeatureFlagLimitations gets a reference to the given FeatureFlagLimitations and assigns it to the FeatureFlagLimitations field.
func (o *ConfigSettingFormulasModel) SetFeatureFlagLimitations(v FeatureFlagLimitations) {
	o.FeatureFlagLimitations = &v
}

func (o ConfigSettingFormulasModel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigSettingFormulasModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Config) {
		toSerialize["config"] = o.Config
	}
	if !IsNil(o.Environment) {
		toSerialize["environment"] = o.Environment
	}
	if !IsNil(o.ReadOnly) {
		toSerialize["readOnly"] = o.ReadOnly
	}
	if o.SettingFormulas != nil {
		toSerialize["settingFormulas"] = o.SettingFormulas
	}
	if !IsNil(o.FeatureFlagLimitations) {
		toSerialize["featureFlagLimitations"] = o.FeatureFlagLimitations
	}
	return toSerialize, nil
}

type NullableConfigSettingFormulasModel struct {
	value *ConfigSettingFormulasModel
	isSet bool
}

func (v NullableConfigSettingFormulasModel) Get() *ConfigSettingFormulasModel {
	return v.value
}

func (v *NullableConfigSettingFormulasModel) Set(val *ConfigSettingFormulasModel) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigSettingFormulasModel) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigSettingFormulasModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigSettingFormulasModel(val *ConfigSettingFormulasModel) *NullableConfigSettingFormulasModel {
	return &NullableConfigSettingFormulasModel{value: val, isSet: true}
}

func (v NullableConfigSettingFormulasModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigSettingFormulasModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


