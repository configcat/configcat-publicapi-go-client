/*
ConfigCat Public Management API

The purpose of this API is to access the ConfigCat platform programmatically. You can **Create**, **Read**, **Update** and **Delete** any entities like **Feature Flags, Configs, Environments** or **Products** within ConfigCat.  **Base API URL**: https://api.configcat.com  If you prefer the swagger documentation, you can find it here: [Swagger UI](https://api.configcat.com/swagger).  The API is based on HTTP REST, uses resource-oriented URLs, status codes and supports JSON  format.   **Important:** Do not use this API for accessing and evaluating feature flag values. Use the [SDKs](https://configcat.com/docs/sdk-reference/overview) or the [ConfigCat Proxy](https://configcat.com/docs/advanced/proxy/proxy-overview/) instead.  # OpenAPI Specification  The complete specification is publicly available in the following formats:  - [OpenAPI v3](https://api.configcat.com/docs/v1/swagger.json) - [Swagger v2](https://api.configcat.com/docs/v1/swagger.v2.json)  You can use it to generate client libraries in various languages with [OpenAPI Generator](https://github.com/OpenAPITools/openapi-generator) or [Swagger Codegen](https://swagger.io/tools/swagger-codegen/) to interact with this API.  # Authentication This API uses the [Basic HTTP Authentication Scheme](https://en.wikipedia.org/wiki/Basic_access_authentication).   <!-- ReDoc-Inject: <security-definitions> -->  # Throttling and rate limits All the rate limited API calls are returning information about the current rate limit period in the following HTTP headers:  | Header | Description | | :- | :- | | X-Rate-Limit-Remaining | The maximum number of requests remaining in the current rate limit period. | | X-Rate-Limit-Reset     | The time when the current rate limit period resets.        |  When the rate limit is exceeded by a request, the API returns with a `HTTP 429 - Too many requests` status along with a `Retry-After` HTTP header. 

API version: v1
Contact: support@configcat.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configcatpublicapi

import (
	"encoding/json"
)

// checks if the UpdatePermissionGroupRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdatePermissionGroupRequest{}

// UpdatePermissionGroupRequest struct for UpdatePermissionGroupRequest
type UpdatePermissionGroupRequest struct {
	// Name of the Permission Group.
	Name NullableString `json:"name,omitempty"`
	// Group members can manage team members.
	CanManageMembers NullableBool `json:"canManageMembers,omitempty"`
	// Group members can create/update Configs.
	CanCreateOrUpdateConfig NullableBool `json:"canCreateOrUpdateConfig,omitempty"`
	// Group members can delete Configs.
	CanDeleteConfig NullableBool `json:"canDeleteConfig,omitempty"`
	// Group members can create/update Environments.
	CanCreateOrUpdateEnvironment NullableBool `json:"canCreateOrUpdateEnvironment,omitempty"`
	// Group members can delete Environments.
	CanDeleteEnvironment NullableBool `json:"canDeleteEnvironment,omitempty"`
	// Group members can create/update Feature Flags and Settings.
	CanCreateOrUpdateSetting NullableBool `json:"canCreateOrUpdateSetting,omitempty"`
	// Group members can attach/detach Tags to Feature Flags and Settings.
	CanTagSetting NullableBool `json:"canTagSetting,omitempty"`
	// Group members can delete Feature Flags and Settings.
	CanDeleteSetting NullableBool `json:"canDeleteSetting,omitempty"`
	// Group members can create/update Tags.
	CanCreateOrUpdateTag NullableBool `json:"canCreateOrUpdateTag,omitempty"`
	// Group members can delete Tags.
	CanDeleteTag NullableBool `json:"canDeleteTag,omitempty"`
	// Group members can create/update/delete Webhooks.
	CanManageWebhook NullableBool `json:"canManageWebhook,omitempty"`
	// Group members can use the export/import feature.
	CanUseExportImport NullableBool `json:"canUseExportImport,omitempty"`
	// Group members can update Product preferences.
	CanManageProductPreferences NullableBool `json:"canManageProductPreferences,omitempty"`
	// Group members can add and configure integrations.
	CanManageIntegrations NullableBool `json:"canManageIntegrations,omitempty"`
	// Group members has access to SDK keys.
	CanViewSdkKey NullableBool `json:"canViewSdkKey,omitempty"`
	// Group members can rotate SDK keys.
	CanRotateSdkKey NullableBool `json:"canRotateSdkKey,omitempty"`
	// Group members can create/update Segments.
	CanCreateOrUpdateSegments NullableBool `json:"canCreateOrUpdateSegments,omitempty"`
	// Group members can delete Segments.
	CanDeleteSegments NullableBool `json:"canDeleteSegments,omitempty"`
	// Group members has access to audit logs.
	CanViewProductAuditLog NullableBool `json:"canViewProductAuditLog,omitempty"`
	// Group members has access to product statistics.
	CanViewProductStatistics NullableBool `json:"canViewProductStatistics,omitempty"`
	AccessType *AccessType `json:"accessType,omitempty"`
	NewEnvironmentAccessType *EnvironmentAccessType `json:"newEnvironmentAccessType,omitempty"`
	// List of environment specific permissions.
	EnvironmentAccesses []CreateOrUpdateEnvironmentAccessModel `json:"environmentAccesses,omitempty"`
}

// NewUpdatePermissionGroupRequest instantiates a new UpdatePermissionGroupRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdatePermissionGroupRequest() *UpdatePermissionGroupRequest {
	this := UpdatePermissionGroupRequest{}
	return &this
}

// NewUpdatePermissionGroupRequestWithDefaults instantiates a new UpdatePermissionGroupRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdatePermissionGroupRequestWithDefaults() *UpdatePermissionGroupRequest {
	this := UpdatePermissionGroupRequest{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdatePermissionGroupRequest) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdatePermissionGroupRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *UpdatePermissionGroupRequest) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *UpdatePermissionGroupRequest) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *UpdatePermissionGroupRequest) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *UpdatePermissionGroupRequest) UnsetName() {
	o.Name.Unset()
}

// GetCanManageMembers returns the CanManageMembers field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdatePermissionGroupRequest) GetCanManageMembers() bool {
	if o == nil || IsNil(o.CanManageMembers.Get()) {
		var ret bool
		return ret
	}
	return *o.CanManageMembers.Get()
}

// GetCanManageMembersOk returns a tuple with the CanManageMembers field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdatePermissionGroupRequest) GetCanManageMembersOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.CanManageMembers.Get(), o.CanManageMembers.IsSet()
}

// HasCanManageMembers returns a boolean if a field has been set.
func (o *UpdatePermissionGroupRequest) HasCanManageMembers() bool {
	if o != nil && o.CanManageMembers.IsSet() {
		return true
	}

	return false
}

// SetCanManageMembers gets a reference to the given NullableBool and assigns it to the CanManageMembers field.
func (o *UpdatePermissionGroupRequest) SetCanManageMembers(v bool) {
	o.CanManageMembers.Set(&v)
}
// SetCanManageMembersNil sets the value for CanManageMembers to be an explicit nil
func (o *UpdatePermissionGroupRequest) SetCanManageMembersNil() {
	o.CanManageMembers.Set(nil)
}

// UnsetCanManageMembers ensures that no value is present for CanManageMembers, not even an explicit nil
func (o *UpdatePermissionGroupRequest) UnsetCanManageMembers() {
	o.CanManageMembers.Unset()
}

// GetCanCreateOrUpdateConfig returns the CanCreateOrUpdateConfig field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdatePermissionGroupRequest) GetCanCreateOrUpdateConfig() bool {
	if o == nil || IsNil(o.CanCreateOrUpdateConfig.Get()) {
		var ret bool
		return ret
	}
	return *o.CanCreateOrUpdateConfig.Get()
}

// GetCanCreateOrUpdateConfigOk returns a tuple with the CanCreateOrUpdateConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdatePermissionGroupRequest) GetCanCreateOrUpdateConfigOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.CanCreateOrUpdateConfig.Get(), o.CanCreateOrUpdateConfig.IsSet()
}

// HasCanCreateOrUpdateConfig returns a boolean if a field has been set.
func (o *UpdatePermissionGroupRequest) HasCanCreateOrUpdateConfig() bool {
	if o != nil && o.CanCreateOrUpdateConfig.IsSet() {
		return true
	}

	return false
}

// SetCanCreateOrUpdateConfig gets a reference to the given NullableBool and assigns it to the CanCreateOrUpdateConfig field.
func (o *UpdatePermissionGroupRequest) SetCanCreateOrUpdateConfig(v bool) {
	o.CanCreateOrUpdateConfig.Set(&v)
}
// SetCanCreateOrUpdateConfigNil sets the value for CanCreateOrUpdateConfig to be an explicit nil
func (o *UpdatePermissionGroupRequest) SetCanCreateOrUpdateConfigNil() {
	o.CanCreateOrUpdateConfig.Set(nil)
}

// UnsetCanCreateOrUpdateConfig ensures that no value is present for CanCreateOrUpdateConfig, not even an explicit nil
func (o *UpdatePermissionGroupRequest) UnsetCanCreateOrUpdateConfig() {
	o.CanCreateOrUpdateConfig.Unset()
}

// GetCanDeleteConfig returns the CanDeleteConfig field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdatePermissionGroupRequest) GetCanDeleteConfig() bool {
	if o == nil || IsNil(o.CanDeleteConfig.Get()) {
		var ret bool
		return ret
	}
	return *o.CanDeleteConfig.Get()
}

// GetCanDeleteConfigOk returns a tuple with the CanDeleteConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdatePermissionGroupRequest) GetCanDeleteConfigOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.CanDeleteConfig.Get(), o.CanDeleteConfig.IsSet()
}

// HasCanDeleteConfig returns a boolean if a field has been set.
func (o *UpdatePermissionGroupRequest) HasCanDeleteConfig() bool {
	if o != nil && o.CanDeleteConfig.IsSet() {
		return true
	}

	return false
}

// SetCanDeleteConfig gets a reference to the given NullableBool and assigns it to the CanDeleteConfig field.
func (o *UpdatePermissionGroupRequest) SetCanDeleteConfig(v bool) {
	o.CanDeleteConfig.Set(&v)
}
// SetCanDeleteConfigNil sets the value for CanDeleteConfig to be an explicit nil
func (o *UpdatePermissionGroupRequest) SetCanDeleteConfigNil() {
	o.CanDeleteConfig.Set(nil)
}

// UnsetCanDeleteConfig ensures that no value is present for CanDeleteConfig, not even an explicit nil
func (o *UpdatePermissionGroupRequest) UnsetCanDeleteConfig() {
	o.CanDeleteConfig.Unset()
}

// GetCanCreateOrUpdateEnvironment returns the CanCreateOrUpdateEnvironment field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdatePermissionGroupRequest) GetCanCreateOrUpdateEnvironment() bool {
	if o == nil || IsNil(o.CanCreateOrUpdateEnvironment.Get()) {
		var ret bool
		return ret
	}
	return *o.CanCreateOrUpdateEnvironment.Get()
}

// GetCanCreateOrUpdateEnvironmentOk returns a tuple with the CanCreateOrUpdateEnvironment field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdatePermissionGroupRequest) GetCanCreateOrUpdateEnvironmentOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.CanCreateOrUpdateEnvironment.Get(), o.CanCreateOrUpdateEnvironment.IsSet()
}

// HasCanCreateOrUpdateEnvironment returns a boolean if a field has been set.
func (o *UpdatePermissionGroupRequest) HasCanCreateOrUpdateEnvironment() bool {
	if o != nil && o.CanCreateOrUpdateEnvironment.IsSet() {
		return true
	}

	return false
}

// SetCanCreateOrUpdateEnvironment gets a reference to the given NullableBool and assigns it to the CanCreateOrUpdateEnvironment field.
func (o *UpdatePermissionGroupRequest) SetCanCreateOrUpdateEnvironment(v bool) {
	o.CanCreateOrUpdateEnvironment.Set(&v)
}
// SetCanCreateOrUpdateEnvironmentNil sets the value for CanCreateOrUpdateEnvironment to be an explicit nil
func (o *UpdatePermissionGroupRequest) SetCanCreateOrUpdateEnvironmentNil() {
	o.CanCreateOrUpdateEnvironment.Set(nil)
}

// UnsetCanCreateOrUpdateEnvironment ensures that no value is present for CanCreateOrUpdateEnvironment, not even an explicit nil
func (o *UpdatePermissionGroupRequest) UnsetCanCreateOrUpdateEnvironment() {
	o.CanCreateOrUpdateEnvironment.Unset()
}

// GetCanDeleteEnvironment returns the CanDeleteEnvironment field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdatePermissionGroupRequest) GetCanDeleteEnvironment() bool {
	if o == nil || IsNil(o.CanDeleteEnvironment.Get()) {
		var ret bool
		return ret
	}
	return *o.CanDeleteEnvironment.Get()
}

// GetCanDeleteEnvironmentOk returns a tuple with the CanDeleteEnvironment field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdatePermissionGroupRequest) GetCanDeleteEnvironmentOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.CanDeleteEnvironment.Get(), o.CanDeleteEnvironment.IsSet()
}

// HasCanDeleteEnvironment returns a boolean if a field has been set.
func (o *UpdatePermissionGroupRequest) HasCanDeleteEnvironment() bool {
	if o != nil && o.CanDeleteEnvironment.IsSet() {
		return true
	}

	return false
}

// SetCanDeleteEnvironment gets a reference to the given NullableBool and assigns it to the CanDeleteEnvironment field.
func (o *UpdatePermissionGroupRequest) SetCanDeleteEnvironment(v bool) {
	o.CanDeleteEnvironment.Set(&v)
}
// SetCanDeleteEnvironmentNil sets the value for CanDeleteEnvironment to be an explicit nil
func (o *UpdatePermissionGroupRequest) SetCanDeleteEnvironmentNil() {
	o.CanDeleteEnvironment.Set(nil)
}

// UnsetCanDeleteEnvironment ensures that no value is present for CanDeleteEnvironment, not even an explicit nil
func (o *UpdatePermissionGroupRequest) UnsetCanDeleteEnvironment() {
	o.CanDeleteEnvironment.Unset()
}

// GetCanCreateOrUpdateSetting returns the CanCreateOrUpdateSetting field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdatePermissionGroupRequest) GetCanCreateOrUpdateSetting() bool {
	if o == nil || IsNil(o.CanCreateOrUpdateSetting.Get()) {
		var ret bool
		return ret
	}
	return *o.CanCreateOrUpdateSetting.Get()
}

// GetCanCreateOrUpdateSettingOk returns a tuple with the CanCreateOrUpdateSetting field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdatePermissionGroupRequest) GetCanCreateOrUpdateSettingOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.CanCreateOrUpdateSetting.Get(), o.CanCreateOrUpdateSetting.IsSet()
}

// HasCanCreateOrUpdateSetting returns a boolean if a field has been set.
func (o *UpdatePermissionGroupRequest) HasCanCreateOrUpdateSetting() bool {
	if o != nil && o.CanCreateOrUpdateSetting.IsSet() {
		return true
	}

	return false
}

// SetCanCreateOrUpdateSetting gets a reference to the given NullableBool and assigns it to the CanCreateOrUpdateSetting field.
func (o *UpdatePermissionGroupRequest) SetCanCreateOrUpdateSetting(v bool) {
	o.CanCreateOrUpdateSetting.Set(&v)
}
// SetCanCreateOrUpdateSettingNil sets the value for CanCreateOrUpdateSetting to be an explicit nil
func (o *UpdatePermissionGroupRequest) SetCanCreateOrUpdateSettingNil() {
	o.CanCreateOrUpdateSetting.Set(nil)
}

// UnsetCanCreateOrUpdateSetting ensures that no value is present for CanCreateOrUpdateSetting, not even an explicit nil
func (o *UpdatePermissionGroupRequest) UnsetCanCreateOrUpdateSetting() {
	o.CanCreateOrUpdateSetting.Unset()
}

// GetCanTagSetting returns the CanTagSetting field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdatePermissionGroupRequest) GetCanTagSetting() bool {
	if o == nil || IsNil(o.CanTagSetting.Get()) {
		var ret bool
		return ret
	}
	return *o.CanTagSetting.Get()
}

// GetCanTagSettingOk returns a tuple with the CanTagSetting field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdatePermissionGroupRequest) GetCanTagSettingOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.CanTagSetting.Get(), o.CanTagSetting.IsSet()
}

// HasCanTagSetting returns a boolean if a field has been set.
func (o *UpdatePermissionGroupRequest) HasCanTagSetting() bool {
	if o != nil && o.CanTagSetting.IsSet() {
		return true
	}

	return false
}

// SetCanTagSetting gets a reference to the given NullableBool and assigns it to the CanTagSetting field.
func (o *UpdatePermissionGroupRequest) SetCanTagSetting(v bool) {
	o.CanTagSetting.Set(&v)
}
// SetCanTagSettingNil sets the value for CanTagSetting to be an explicit nil
func (o *UpdatePermissionGroupRequest) SetCanTagSettingNil() {
	o.CanTagSetting.Set(nil)
}

// UnsetCanTagSetting ensures that no value is present for CanTagSetting, not even an explicit nil
func (o *UpdatePermissionGroupRequest) UnsetCanTagSetting() {
	o.CanTagSetting.Unset()
}

// GetCanDeleteSetting returns the CanDeleteSetting field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdatePermissionGroupRequest) GetCanDeleteSetting() bool {
	if o == nil || IsNil(o.CanDeleteSetting.Get()) {
		var ret bool
		return ret
	}
	return *o.CanDeleteSetting.Get()
}

// GetCanDeleteSettingOk returns a tuple with the CanDeleteSetting field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdatePermissionGroupRequest) GetCanDeleteSettingOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.CanDeleteSetting.Get(), o.CanDeleteSetting.IsSet()
}

// HasCanDeleteSetting returns a boolean if a field has been set.
func (o *UpdatePermissionGroupRequest) HasCanDeleteSetting() bool {
	if o != nil && o.CanDeleteSetting.IsSet() {
		return true
	}

	return false
}

// SetCanDeleteSetting gets a reference to the given NullableBool and assigns it to the CanDeleteSetting field.
func (o *UpdatePermissionGroupRequest) SetCanDeleteSetting(v bool) {
	o.CanDeleteSetting.Set(&v)
}
// SetCanDeleteSettingNil sets the value for CanDeleteSetting to be an explicit nil
func (o *UpdatePermissionGroupRequest) SetCanDeleteSettingNil() {
	o.CanDeleteSetting.Set(nil)
}

// UnsetCanDeleteSetting ensures that no value is present for CanDeleteSetting, not even an explicit nil
func (o *UpdatePermissionGroupRequest) UnsetCanDeleteSetting() {
	o.CanDeleteSetting.Unset()
}

// GetCanCreateOrUpdateTag returns the CanCreateOrUpdateTag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdatePermissionGroupRequest) GetCanCreateOrUpdateTag() bool {
	if o == nil || IsNil(o.CanCreateOrUpdateTag.Get()) {
		var ret bool
		return ret
	}
	return *o.CanCreateOrUpdateTag.Get()
}

// GetCanCreateOrUpdateTagOk returns a tuple with the CanCreateOrUpdateTag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdatePermissionGroupRequest) GetCanCreateOrUpdateTagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.CanCreateOrUpdateTag.Get(), o.CanCreateOrUpdateTag.IsSet()
}

// HasCanCreateOrUpdateTag returns a boolean if a field has been set.
func (o *UpdatePermissionGroupRequest) HasCanCreateOrUpdateTag() bool {
	if o != nil && o.CanCreateOrUpdateTag.IsSet() {
		return true
	}

	return false
}

// SetCanCreateOrUpdateTag gets a reference to the given NullableBool and assigns it to the CanCreateOrUpdateTag field.
func (o *UpdatePermissionGroupRequest) SetCanCreateOrUpdateTag(v bool) {
	o.CanCreateOrUpdateTag.Set(&v)
}
// SetCanCreateOrUpdateTagNil sets the value for CanCreateOrUpdateTag to be an explicit nil
func (o *UpdatePermissionGroupRequest) SetCanCreateOrUpdateTagNil() {
	o.CanCreateOrUpdateTag.Set(nil)
}

// UnsetCanCreateOrUpdateTag ensures that no value is present for CanCreateOrUpdateTag, not even an explicit nil
func (o *UpdatePermissionGroupRequest) UnsetCanCreateOrUpdateTag() {
	o.CanCreateOrUpdateTag.Unset()
}

// GetCanDeleteTag returns the CanDeleteTag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdatePermissionGroupRequest) GetCanDeleteTag() bool {
	if o == nil || IsNil(o.CanDeleteTag.Get()) {
		var ret bool
		return ret
	}
	return *o.CanDeleteTag.Get()
}

// GetCanDeleteTagOk returns a tuple with the CanDeleteTag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdatePermissionGroupRequest) GetCanDeleteTagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.CanDeleteTag.Get(), o.CanDeleteTag.IsSet()
}

// HasCanDeleteTag returns a boolean if a field has been set.
func (o *UpdatePermissionGroupRequest) HasCanDeleteTag() bool {
	if o != nil && o.CanDeleteTag.IsSet() {
		return true
	}

	return false
}

// SetCanDeleteTag gets a reference to the given NullableBool and assigns it to the CanDeleteTag field.
func (o *UpdatePermissionGroupRequest) SetCanDeleteTag(v bool) {
	o.CanDeleteTag.Set(&v)
}
// SetCanDeleteTagNil sets the value for CanDeleteTag to be an explicit nil
func (o *UpdatePermissionGroupRequest) SetCanDeleteTagNil() {
	o.CanDeleteTag.Set(nil)
}

// UnsetCanDeleteTag ensures that no value is present for CanDeleteTag, not even an explicit nil
func (o *UpdatePermissionGroupRequest) UnsetCanDeleteTag() {
	o.CanDeleteTag.Unset()
}

// GetCanManageWebhook returns the CanManageWebhook field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdatePermissionGroupRequest) GetCanManageWebhook() bool {
	if o == nil || IsNil(o.CanManageWebhook.Get()) {
		var ret bool
		return ret
	}
	return *o.CanManageWebhook.Get()
}

// GetCanManageWebhookOk returns a tuple with the CanManageWebhook field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdatePermissionGroupRequest) GetCanManageWebhookOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.CanManageWebhook.Get(), o.CanManageWebhook.IsSet()
}

// HasCanManageWebhook returns a boolean if a field has been set.
func (o *UpdatePermissionGroupRequest) HasCanManageWebhook() bool {
	if o != nil && o.CanManageWebhook.IsSet() {
		return true
	}

	return false
}

// SetCanManageWebhook gets a reference to the given NullableBool and assigns it to the CanManageWebhook field.
func (o *UpdatePermissionGroupRequest) SetCanManageWebhook(v bool) {
	o.CanManageWebhook.Set(&v)
}
// SetCanManageWebhookNil sets the value for CanManageWebhook to be an explicit nil
func (o *UpdatePermissionGroupRequest) SetCanManageWebhookNil() {
	o.CanManageWebhook.Set(nil)
}

// UnsetCanManageWebhook ensures that no value is present for CanManageWebhook, not even an explicit nil
func (o *UpdatePermissionGroupRequest) UnsetCanManageWebhook() {
	o.CanManageWebhook.Unset()
}

// GetCanUseExportImport returns the CanUseExportImport field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdatePermissionGroupRequest) GetCanUseExportImport() bool {
	if o == nil || IsNil(o.CanUseExportImport.Get()) {
		var ret bool
		return ret
	}
	return *o.CanUseExportImport.Get()
}

// GetCanUseExportImportOk returns a tuple with the CanUseExportImport field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdatePermissionGroupRequest) GetCanUseExportImportOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.CanUseExportImport.Get(), o.CanUseExportImport.IsSet()
}

// HasCanUseExportImport returns a boolean if a field has been set.
func (o *UpdatePermissionGroupRequest) HasCanUseExportImport() bool {
	if o != nil && o.CanUseExportImport.IsSet() {
		return true
	}

	return false
}

// SetCanUseExportImport gets a reference to the given NullableBool and assigns it to the CanUseExportImport field.
func (o *UpdatePermissionGroupRequest) SetCanUseExportImport(v bool) {
	o.CanUseExportImport.Set(&v)
}
// SetCanUseExportImportNil sets the value for CanUseExportImport to be an explicit nil
func (o *UpdatePermissionGroupRequest) SetCanUseExportImportNil() {
	o.CanUseExportImport.Set(nil)
}

// UnsetCanUseExportImport ensures that no value is present for CanUseExportImport, not even an explicit nil
func (o *UpdatePermissionGroupRequest) UnsetCanUseExportImport() {
	o.CanUseExportImport.Unset()
}

// GetCanManageProductPreferences returns the CanManageProductPreferences field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdatePermissionGroupRequest) GetCanManageProductPreferences() bool {
	if o == nil || IsNil(o.CanManageProductPreferences.Get()) {
		var ret bool
		return ret
	}
	return *o.CanManageProductPreferences.Get()
}

// GetCanManageProductPreferencesOk returns a tuple with the CanManageProductPreferences field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdatePermissionGroupRequest) GetCanManageProductPreferencesOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.CanManageProductPreferences.Get(), o.CanManageProductPreferences.IsSet()
}

// HasCanManageProductPreferences returns a boolean if a field has been set.
func (o *UpdatePermissionGroupRequest) HasCanManageProductPreferences() bool {
	if o != nil && o.CanManageProductPreferences.IsSet() {
		return true
	}

	return false
}

// SetCanManageProductPreferences gets a reference to the given NullableBool and assigns it to the CanManageProductPreferences field.
func (o *UpdatePermissionGroupRequest) SetCanManageProductPreferences(v bool) {
	o.CanManageProductPreferences.Set(&v)
}
// SetCanManageProductPreferencesNil sets the value for CanManageProductPreferences to be an explicit nil
func (o *UpdatePermissionGroupRequest) SetCanManageProductPreferencesNil() {
	o.CanManageProductPreferences.Set(nil)
}

// UnsetCanManageProductPreferences ensures that no value is present for CanManageProductPreferences, not even an explicit nil
func (o *UpdatePermissionGroupRequest) UnsetCanManageProductPreferences() {
	o.CanManageProductPreferences.Unset()
}

// GetCanManageIntegrations returns the CanManageIntegrations field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdatePermissionGroupRequest) GetCanManageIntegrations() bool {
	if o == nil || IsNil(o.CanManageIntegrations.Get()) {
		var ret bool
		return ret
	}
	return *o.CanManageIntegrations.Get()
}

// GetCanManageIntegrationsOk returns a tuple with the CanManageIntegrations field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdatePermissionGroupRequest) GetCanManageIntegrationsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.CanManageIntegrations.Get(), o.CanManageIntegrations.IsSet()
}

// HasCanManageIntegrations returns a boolean if a field has been set.
func (o *UpdatePermissionGroupRequest) HasCanManageIntegrations() bool {
	if o != nil && o.CanManageIntegrations.IsSet() {
		return true
	}

	return false
}

// SetCanManageIntegrations gets a reference to the given NullableBool and assigns it to the CanManageIntegrations field.
func (o *UpdatePermissionGroupRequest) SetCanManageIntegrations(v bool) {
	o.CanManageIntegrations.Set(&v)
}
// SetCanManageIntegrationsNil sets the value for CanManageIntegrations to be an explicit nil
func (o *UpdatePermissionGroupRequest) SetCanManageIntegrationsNil() {
	o.CanManageIntegrations.Set(nil)
}

// UnsetCanManageIntegrations ensures that no value is present for CanManageIntegrations, not even an explicit nil
func (o *UpdatePermissionGroupRequest) UnsetCanManageIntegrations() {
	o.CanManageIntegrations.Unset()
}

// GetCanViewSdkKey returns the CanViewSdkKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdatePermissionGroupRequest) GetCanViewSdkKey() bool {
	if o == nil || IsNil(o.CanViewSdkKey.Get()) {
		var ret bool
		return ret
	}
	return *o.CanViewSdkKey.Get()
}

// GetCanViewSdkKeyOk returns a tuple with the CanViewSdkKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdatePermissionGroupRequest) GetCanViewSdkKeyOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.CanViewSdkKey.Get(), o.CanViewSdkKey.IsSet()
}

// HasCanViewSdkKey returns a boolean if a field has been set.
func (o *UpdatePermissionGroupRequest) HasCanViewSdkKey() bool {
	if o != nil && o.CanViewSdkKey.IsSet() {
		return true
	}

	return false
}

// SetCanViewSdkKey gets a reference to the given NullableBool and assigns it to the CanViewSdkKey field.
func (o *UpdatePermissionGroupRequest) SetCanViewSdkKey(v bool) {
	o.CanViewSdkKey.Set(&v)
}
// SetCanViewSdkKeyNil sets the value for CanViewSdkKey to be an explicit nil
func (o *UpdatePermissionGroupRequest) SetCanViewSdkKeyNil() {
	o.CanViewSdkKey.Set(nil)
}

// UnsetCanViewSdkKey ensures that no value is present for CanViewSdkKey, not even an explicit nil
func (o *UpdatePermissionGroupRequest) UnsetCanViewSdkKey() {
	o.CanViewSdkKey.Unset()
}

// GetCanRotateSdkKey returns the CanRotateSdkKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdatePermissionGroupRequest) GetCanRotateSdkKey() bool {
	if o == nil || IsNil(o.CanRotateSdkKey.Get()) {
		var ret bool
		return ret
	}
	return *o.CanRotateSdkKey.Get()
}

// GetCanRotateSdkKeyOk returns a tuple with the CanRotateSdkKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdatePermissionGroupRequest) GetCanRotateSdkKeyOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.CanRotateSdkKey.Get(), o.CanRotateSdkKey.IsSet()
}

// HasCanRotateSdkKey returns a boolean if a field has been set.
func (o *UpdatePermissionGroupRequest) HasCanRotateSdkKey() bool {
	if o != nil && o.CanRotateSdkKey.IsSet() {
		return true
	}

	return false
}

// SetCanRotateSdkKey gets a reference to the given NullableBool and assigns it to the CanRotateSdkKey field.
func (o *UpdatePermissionGroupRequest) SetCanRotateSdkKey(v bool) {
	o.CanRotateSdkKey.Set(&v)
}
// SetCanRotateSdkKeyNil sets the value for CanRotateSdkKey to be an explicit nil
func (o *UpdatePermissionGroupRequest) SetCanRotateSdkKeyNil() {
	o.CanRotateSdkKey.Set(nil)
}

// UnsetCanRotateSdkKey ensures that no value is present for CanRotateSdkKey, not even an explicit nil
func (o *UpdatePermissionGroupRequest) UnsetCanRotateSdkKey() {
	o.CanRotateSdkKey.Unset()
}

// GetCanCreateOrUpdateSegments returns the CanCreateOrUpdateSegments field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdatePermissionGroupRequest) GetCanCreateOrUpdateSegments() bool {
	if o == nil || IsNil(o.CanCreateOrUpdateSegments.Get()) {
		var ret bool
		return ret
	}
	return *o.CanCreateOrUpdateSegments.Get()
}

// GetCanCreateOrUpdateSegmentsOk returns a tuple with the CanCreateOrUpdateSegments field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdatePermissionGroupRequest) GetCanCreateOrUpdateSegmentsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.CanCreateOrUpdateSegments.Get(), o.CanCreateOrUpdateSegments.IsSet()
}

// HasCanCreateOrUpdateSegments returns a boolean if a field has been set.
func (o *UpdatePermissionGroupRequest) HasCanCreateOrUpdateSegments() bool {
	if o != nil && o.CanCreateOrUpdateSegments.IsSet() {
		return true
	}

	return false
}

// SetCanCreateOrUpdateSegments gets a reference to the given NullableBool and assigns it to the CanCreateOrUpdateSegments field.
func (o *UpdatePermissionGroupRequest) SetCanCreateOrUpdateSegments(v bool) {
	o.CanCreateOrUpdateSegments.Set(&v)
}
// SetCanCreateOrUpdateSegmentsNil sets the value for CanCreateOrUpdateSegments to be an explicit nil
func (o *UpdatePermissionGroupRequest) SetCanCreateOrUpdateSegmentsNil() {
	o.CanCreateOrUpdateSegments.Set(nil)
}

// UnsetCanCreateOrUpdateSegments ensures that no value is present for CanCreateOrUpdateSegments, not even an explicit nil
func (o *UpdatePermissionGroupRequest) UnsetCanCreateOrUpdateSegments() {
	o.CanCreateOrUpdateSegments.Unset()
}

// GetCanDeleteSegments returns the CanDeleteSegments field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdatePermissionGroupRequest) GetCanDeleteSegments() bool {
	if o == nil || IsNil(o.CanDeleteSegments.Get()) {
		var ret bool
		return ret
	}
	return *o.CanDeleteSegments.Get()
}

// GetCanDeleteSegmentsOk returns a tuple with the CanDeleteSegments field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdatePermissionGroupRequest) GetCanDeleteSegmentsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.CanDeleteSegments.Get(), o.CanDeleteSegments.IsSet()
}

// HasCanDeleteSegments returns a boolean if a field has been set.
func (o *UpdatePermissionGroupRequest) HasCanDeleteSegments() bool {
	if o != nil && o.CanDeleteSegments.IsSet() {
		return true
	}

	return false
}

// SetCanDeleteSegments gets a reference to the given NullableBool and assigns it to the CanDeleteSegments field.
func (o *UpdatePermissionGroupRequest) SetCanDeleteSegments(v bool) {
	o.CanDeleteSegments.Set(&v)
}
// SetCanDeleteSegmentsNil sets the value for CanDeleteSegments to be an explicit nil
func (o *UpdatePermissionGroupRequest) SetCanDeleteSegmentsNil() {
	o.CanDeleteSegments.Set(nil)
}

// UnsetCanDeleteSegments ensures that no value is present for CanDeleteSegments, not even an explicit nil
func (o *UpdatePermissionGroupRequest) UnsetCanDeleteSegments() {
	o.CanDeleteSegments.Unset()
}

// GetCanViewProductAuditLog returns the CanViewProductAuditLog field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdatePermissionGroupRequest) GetCanViewProductAuditLog() bool {
	if o == nil || IsNil(o.CanViewProductAuditLog.Get()) {
		var ret bool
		return ret
	}
	return *o.CanViewProductAuditLog.Get()
}

// GetCanViewProductAuditLogOk returns a tuple with the CanViewProductAuditLog field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdatePermissionGroupRequest) GetCanViewProductAuditLogOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.CanViewProductAuditLog.Get(), o.CanViewProductAuditLog.IsSet()
}

// HasCanViewProductAuditLog returns a boolean if a field has been set.
func (o *UpdatePermissionGroupRequest) HasCanViewProductAuditLog() bool {
	if o != nil && o.CanViewProductAuditLog.IsSet() {
		return true
	}

	return false
}

// SetCanViewProductAuditLog gets a reference to the given NullableBool and assigns it to the CanViewProductAuditLog field.
func (o *UpdatePermissionGroupRequest) SetCanViewProductAuditLog(v bool) {
	o.CanViewProductAuditLog.Set(&v)
}
// SetCanViewProductAuditLogNil sets the value for CanViewProductAuditLog to be an explicit nil
func (o *UpdatePermissionGroupRequest) SetCanViewProductAuditLogNil() {
	o.CanViewProductAuditLog.Set(nil)
}

// UnsetCanViewProductAuditLog ensures that no value is present for CanViewProductAuditLog, not even an explicit nil
func (o *UpdatePermissionGroupRequest) UnsetCanViewProductAuditLog() {
	o.CanViewProductAuditLog.Unset()
}

// GetCanViewProductStatistics returns the CanViewProductStatistics field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdatePermissionGroupRequest) GetCanViewProductStatistics() bool {
	if o == nil || IsNil(o.CanViewProductStatistics.Get()) {
		var ret bool
		return ret
	}
	return *o.CanViewProductStatistics.Get()
}

// GetCanViewProductStatisticsOk returns a tuple with the CanViewProductStatistics field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdatePermissionGroupRequest) GetCanViewProductStatisticsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.CanViewProductStatistics.Get(), o.CanViewProductStatistics.IsSet()
}

// HasCanViewProductStatistics returns a boolean if a field has been set.
func (o *UpdatePermissionGroupRequest) HasCanViewProductStatistics() bool {
	if o != nil && o.CanViewProductStatistics.IsSet() {
		return true
	}

	return false
}

// SetCanViewProductStatistics gets a reference to the given NullableBool and assigns it to the CanViewProductStatistics field.
func (o *UpdatePermissionGroupRequest) SetCanViewProductStatistics(v bool) {
	o.CanViewProductStatistics.Set(&v)
}
// SetCanViewProductStatisticsNil sets the value for CanViewProductStatistics to be an explicit nil
func (o *UpdatePermissionGroupRequest) SetCanViewProductStatisticsNil() {
	o.CanViewProductStatistics.Set(nil)
}

// UnsetCanViewProductStatistics ensures that no value is present for CanViewProductStatistics, not even an explicit nil
func (o *UpdatePermissionGroupRequest) UnsetCanViewProductStatistics() {
	o.CanViewProductStatistics.Unset()
}

// GetAccessType returns the AccessType field value if set, zero value otherwise.
func (o *UpdatePermissionGroupRequest) GetAccessType() AccessType {
	if o == nil || IsNil(o.AccessType) {
		var ret AccessType
		return ret
	}
	return *o.AccessType
}

// GetAccessTypeOk returns a tuple with the AccessType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatePermissionGroupRequest) GetAccessTypeOk() (*AccessType, bool) {
	if o == nil || IsNil(o.AccessType) {
		return nil, false
	}
	return o.AccessType, true
}

// HasAccessType returns a boolean if a field has been set.
func (o *UpdatePermissionGroupRequest) HasAccessType() bool {
	if o != nil && !IsNil(o.AccessType) {
		return true
	}

	return false
}

// SetAccessType gets a reference to the given AccessType and assigns it to the AccessType field.
func (o *UpdatePermissionGroupRequest) SetAccessType(v AccessType) {
	o.AccessType = &v
}

// GetNewEnvironmentAccessType returns the NewEnvironmentAccessType field value if set, zero value otherwise.
func (o *UpdatePermissionGroupRequest) GetNewEnvironmentAccessType() EnvironmentAccessType {
	if o == nil || IsNil(o.NewEnvironmentAccessType) {
		var ret EnvironmentAccessType
		return ret
	}
	return *o.NewEnvironmentAccessType
}

// GetNewEnvironmentAccessTypeOk returns a tuple with the NewEnvironmentAccessType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatePermissionGroupRequest) GetNewEnvironmentAccessTypeOk() (*EnvironmentAccessType, bool) {
	if o == nil || IsNil(o.NewEnvironmentAccessType) {
		return nil, false
	}
	return o.NewEnvironmentAccessType, true
}

// HasNewEnvironmentAccessType returns a boolean if a field has been set.
func (o *UpdatePermissionGroupRequest) HasNewEnvironmentAccessType() bool {
	if o != nil && !IsNil(o.NewEnvironmentAccessType) {
		return true
	}

	return false
}

// SetNewEnvironmentAccessType gets a reference to the given EnvironmentAccessType and assigns it to the NewEnvironmentAccessType field.
func (o *UpdatePermissionGroupRequest) SetNewEnvironmentAccessType(v EnvironmentAccessType) {
	o.NewEnvironmentAccessType = &v
}

// GetEnvironmentAccesses returns the EnvironmentAccesses field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdatePermissionGroupRequest) GetEnvironmentAccesses() []CreateOrUpdateEnvironmentAccessModel {
	if o == nil {
		var ret []CreateOrUpdateEnvironmentAccessModel
		return ret
	}
	return o.EnvironmentAccesses
}

// GetEnvironmentAccessesOk returns a tuple with the EnvironmentAccesses field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdatePermissionGroupRequest) GetEnvironmentAccessesOk() ([]CreateOrUpdateEnvironmentAccessModel, bool) {
	if o == nil || IsNil(o.EnvironmentAccesses) {
		return nil, false
	}
	return o.EnvironmentAccesses, true
}

// HasEnvironmentAccesses returns a boolean if a field has been set.
func (o *UpdatePermissionGroupRequest) HasEnvironmentAccesses() bool {
	if o != nil && IsNil(o.EnvironmentAccesses) {
		return true
	}

	return false
}

// SetEnvironmentAccesses gets a reference to the given []CreateOrUpdateEnvironmentAccessModel and assigns it to the EnvironmentAccesses field.
func (o *UpdatePermissionGroupRequest) SetEnvironmentAccesses(v []CreateOrUpdateEnvironmentAccessModel) {
	o.EnvironmentAccesses = v
}

func (o UpdatePermissionGroupRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdatePermissionGroupRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.CanManageMembers.IsSet() {
		toSerialize["canManageMembers"] = o.CanManageMembers.Get()
	}
	if o.CanCreateOrUpdateConfig.IsSet() {
		toSerialize["canCreateOrUpdateConfig"] = o.CanCreateOrUpdateConfig.Get()
	}
	if o.CanDeleteConfig.IsSet() {
		toSerialize["canDeleteConfig"] = o.CanDeleteConfig.Get()
	}
	if o.CanCreateOrUpdateEnvironment.IsSet() {
		toSerialize["canCreateOrUpdateEnvironment"] = o.CanCreateOrUpdateEnvironment.Get()
	}
	if o.CanDeleteEnvironment.IsSet() {
		toSerialize["canDeleteEnvironment"] = o.CanDeleteEnvironment.Get()
	}
	if o.CanCreateOrUpdateSetting.IsSet() {
		toSerialize["canCreateOrUpdateSetting"] = o.CanCreateOrUpdateSetting.Get()
	}
	if o.CanTagSetting.IsSet() {
		toSerialize["canTagSetting"] = o.CanTagSetting.Get()
	}
	if o.CanDeleteSetting.IsSet() {
		toSerialize["canDeleteSetting"] = o.CanDeleteSetting.Get()
	}
	if o.CanCreateOrUpdateTag.IsSet() {
		toSerialize["canCreateOrUpdateTag"] = o.CanCreateOrUpdateTag.Get()
	}
	if o.CanDeleteTag.IsSet() {
		toSerialize["canDeleteTag"] = o.CanDeleteTag.Get()
	}
	if o.CanManageWebhook.IsSet() {
		toSerialize["canManageWebhook"] = o.CanManageWebhook.Get()
	}
	if o.CanUseExportImport.IsSet() {
		toSerialize["canUseExportImport"] = o.CanUseExportImport.Get()
	}
	if o.CanManageProductPreferences.IsSet() {
		toSerialize["canManageProductPreferences"] = o.CanManageProductPreferences.Get()
	}
	if o.CanManageIntegrations.IsSet() {
		toSerialize["canManageIntegrations"] = o.CanManageIntegrations.Get()
	}
	if o.CanViewSdkKey.IsSet() {
		toSerialize["canViewSdkKey"] = o.CanViewSdkKey.Get()
	}
	if o.CanRotateSdkKey.IsSet() {
		toSerialize["canRotateSdkKey"] = o.CanRotateSdkKey.Get()
	}
	if o.CanCreateOrUpdateSegments.IsSet() {
		toSerialize["canCreateOrUpdateSegments"] = o.CanCreateOrUpdateSegments.Get()
	}
	if o.CanDeleteSegments.IsSet() {
		toSerialize["canDeleteSegments"] = o.CanDeleteSegments.Get()
	}
	if o.CanViewProductAuditLog.IsSet() {
		toSerialize["canViewProductAuditLog"] = o.CanViewProductAuditLog.Get()
	}
	if o.CanViewProductStatistics.IsSet() {
		toSerialize["canViewProductStatistics"] = o.CanViewProductStatistics.Get()
	}
	if !IsNil(o.AccessType) {
		toSerialize["accessType"] = o.AccessType
	}
	if !IsNil(o.NewEnvironmentAccessType) {
		toSerialize["newEnvironmentAccessType"] = o.NewEnvironmentAccessType
	}
	if o.EnvironmentAccesses != nil {
		toSerialize["environmentAccesses"] = o.EnvironmentAccesses
	}
	return toSerialize, nil
}

type NullableUpdatePermissionGroupRequest struct {
	value *UpdatePermissionGroupRequest
	isSet bool
}

func (v NullableUpdatePermissionGroupRequest) Get() *UpdatePermissionGroupRequest {
	return v.value
}

func (v *NullableUpdatePermissionGroupRequest) Set(val *UpdatePermissionGroupRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdatePermissionGroupRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdatePermissionGroupRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdatePermissionGroupRequest(val *UpdatePermissionGroupRequest) *NullableUpdatePermissionGroupRequest {
	return &NullableUpdatePermissionGroupRequest{value: val, isSet: true}
}

func (v NullableUpdatePermissionGroupRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdatePermissionGroupRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


