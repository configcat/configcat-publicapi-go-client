/*
ConfigCat Public Management API

The purpose of this API is to access the ConfigCat platform programmatically. You can **Create**, **Read**, **Update** and **Delete** any entities like **Feature Flags, Configs, Environments** or **Products** within ConfigCat.  **Base API URL**: https://test-api.configcat.com  If you prefer the swagger documentation, you can find it here: [Swagger UI](https://test-api.configcat.com/swagger).  The API is based on HTTP REST, uses resource-oriented URLs, status codes and supports JSON  format.   **Important:** Do not use this API for accessing and evaluating feature flag values. Use the [SDKs](https://configcat.com/docs/sdk-reference/overview) or the [ConfigCat Proxy](https://configcat.com/docs/advanced/proxy/proxy-overview/) instead.  # OpenAPI Specification  The complete specification is publicly available in the following formats:  - [OpenAPI v3](https://test-api.configcat.com/docs/v1/swagger.json) - [Swagger v2](https://test-api.configcat.com/docs/v1/swagger.v2.json)  You can use it to generate client libraries in various languages with [OpenAPI Generator](https://github.com/OpenAPITools/openapi-generator) or [Swagger Codegen](https://swagger.io/tools/swagger-codegen/) to interact with this API.  # Authentication This API uses the [Basic HTTP Authentication Scheme](https://en.wikipedia.org/wiki/Basic_access_authentication).   <!-- ReDoc-Inject: <security-definitions> -->  # Throttling and rate limits All the rate limited API calls are returning information about the current rate limit period in the following HTTP headers:  | Header | Description | | :- | :- | | X-Rate-Limit-Remaining | The maximum number of requests remaining in the current rate limit period. | | X-Rate-Limit-Reset     | The time when the current rate limit period resets.        |  When the rate limit is exceeded by a request, the API returns with a `HTTP 429 - Too many requests` status along with a `Retry-After` HTTP header. 

API version: v1
Contact: support@configcat.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configcatpublicapi

import (
	"encoding/json"
	"fmt"
)

// KeyGenerationMode Determines the Feature Flag key generation mode.
type KeyGenerationMode string

// List of KeyGenerationMode
const (
	KEYGENERATIONMODE_CAMEL_CASE KeyGenerationMode = "camelCase"
	KEYGENERATIONMODE_LOWER_CASE KeyGenerationMode = "lowerCase"
	KEYGENERATIONMODE_UPPER_CASE KeyGenerationMode = "upperCase"
	KEYGENERATIONMODE_PASCAL_CASE KeyGenerationMode = "pascalCase"
	KEYGENERATIONMODE_KEBAB_CASE KeyGenerationMode = "kebabCase"
)

// All allowed values of KeyGenerationMode enum
var AllowedKeyGenerationModeEnumValues = []KeyGenerationMode{
	"camelCase",
	"lowerCase",
	"upperCase",
	"pascalCase",
	"kebabCase",
}

func (v *KeyGenerationMode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := KeyGenerationMode(value)
	for _, existing := range AllowedKeyGenerationModeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid KeyGenerationMode", value)
}

// NewKeyGenerationModeFromValue returns a pointer to a valid KeyGenerationMode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewKeyGenerationModeFromValue(v string) (*KeyGenerationMode, error) {
	ev := KeyGenerationMode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for KeyGenerationMode: valid values are %v", v, AllowedKeyGenerationModeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v KeyGenerationMode) IsValid() bool {
	for _, existing := range AllowedKeyGenerationModeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to KeyGenerationMode value
func (v KeyGenerationMode) Ptr() *KeyGenerationMode {
	return &v
}

type NullableKeyGenerationMode struct {
	value *KeyGenerationMode
	isSet bool
}

func (v NullableKeyGenerationMode) Get() *KeyGenerationMode {
	return v.value
}

func (v *NullableKeyGenerationMode) Set(val *KeyGenerationMode) {
	v.value = val
	v.isSet = true
}

func (v NullableKeyGenerationMode) IsSet() bool {
	return v.isSet
}

func (v *NullableKeyGenerationMode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeyGenerationMode(val *KeyGenerationMode) *NullableKeyGenerationMode {
	return &NullableKeyGenerationMode{value: val, isSet: true}
}

func (v NullableKeyGenerationMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeyGenerationMode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

