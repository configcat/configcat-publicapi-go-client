/*
ConfigCat Public Management API

The purpose of this API is to access the ConfigCat platform programmatically. You can **Create**, **Read**, **Update** and **Delete** any entities like **Feature Flags, Configs, Environments** or **Products** within ConfigCat.  **Base API URL**: https://test-api.configcat.com  If you prefer the swagger documentation, you can find it here: [Swagger UI](https://test-api.configcat.com/swagger).  The API is based on HTTP REST, uses resource-oriented URLs, status codes and supports JSON  format.   **Important:** Do not use this API for accessing and evaluating feature flag values. Use the [SDKs](https://configcat.com/docs/sdk-reference/overview) or the [ConfigCat Proxy](https://configcat.com/docs/advanced/proxy/proxy-overview/) instead.  # OpenAPI Specification  The complete specification is publicly available in the following formats:  - [OpenAPI v3](https://test-api.configcat.com/docs/v1/swagger.json) - [Swagger v2](https://test-api.configcat.com/docs/v1/swagger.v2.json)  You can use it to generate client libraries in various languages with [OpenAPI Generator](https://github.com/OpenAPITools/openapi-generator) or [Swagger Codegen](https://swagger.io/tools/swagger-codegen/) to interact with this API.  # Authentication This API uses the [Basic HTTP Authentication Scheme](https://en.wikipedia.org/wiki/Basic_access_authentication).   <!-- ReDoc-Inject: <security-definitions> -->  # Throttling and rate limits All the rate limited API calls are returning information about the current rate limit period in the following HTTP headers:  | Header | Description | | :- | :- | | X-Rate-Limit-Remaining | The maximum number of requests remaining in the current rate limit period. | | X-Rate-Limit-Reset     | The time when the current rate limit period resets.        |  When the rate limit is exceeded by a request, the API returns with a `HTTP 429 - Too many requests` status along with a `Retry-After` HTTP header. 

API version: v1
Contact: support@configcat.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configcatpublicapi

import (
	"encoding/json"
)

// checks if the RolloutRuleModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RolloutRuleModel{}

// RolloutRuleModel struct for RolloutRuleModel
type RolloutRuleModel struct {
	// The user attribute to compare.
	ComparisonAttribute NullableString `json:"comparisonAttribute,omitempty"`
	Comparator *RolloutRuleComparator `json:"comparator,omitempty"`
	// The value to compare against.
	ComparisonValue NullableString `json:"comparisonValue,omitempty"`
	// The value to serve when the comparison matches. It must respect the setting type.
	Value interface{} `json:"value,omitempty"`
	SegmentComparator *SegmentComparator `json:"segmentComparator,omitempty"`
	// The segment to compare against.
	SegmentId NullableString `json:"segmentId,omitempty"`
}

// NewRolloutRuleModel instantiates a new RolloutRuleModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRolloutRuleModel() *RolloutRuleModel {
	this := RolloutRuleModel{}
	return &this
}

// NewRolloutRuleModelWithDefaults instantiates a new RolloutRuleModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRolloutRuleModelWithDefaults() *RolloutRuleModel {
	this := RolloutRuleModel{}
	return &this
}

// GetComparisonAttribute returns the ComparisonAttribute field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RolloutRuleModel) GetComparisonAttribute() string {
	if o == nil || IsNil(o.ComparisonAttribute.Get()) {
		var ret string
		return ret
	}
	return *o.ComparisonAttribute.Get()
}

// GetComparisonAttributeOk returns a tuple with the ComparisonAttribute field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RolloutRuleModel) GetComparisonAttributeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ComparisonAttribute.Get(), o.ComparisonAttribute.IsSet()
}

// HasComparisonAttribute returns a boolean if a field has been set.
func (o *RolloutRuleModel) HasComparisonAttribute() bool {
	if o != nil && o.ComparisonAttribute.IsSet() {
		return true
	}

	return false
}

// SetComparisonAttribute gets a reference to the given NullableString and assigns it to the ComparisonAttribute field.
func (o *RolloutRuleModel) SetComparisonAttribute(v string) {
	o.ComparisonAttribute.Set(&v)
}
// SetComparisonAttributeNil sets the value for ComparisonAttribute to be an explicit nil
func (o *RolloutRuleModel) SetComparisonAttributeNil() {
	o.ComparisonAttribute.Set(nil)
}

// UnsetComparisonAttribute ensures that no value is present for ComparisonAttribute, not even an explicit nil
func (o *RolloutRuleModel) UnsetComparisonAttribute() {
	o.ComparisonAttribute.Unset()
}

// GetComparator returns the Comparator field value if set, zero value otherwise.
func (o *RolloutRuleModel) GetComparator() RolloutRuleComparator {
	if o == nil || IsNil(o.Comparator) {
		var ret RolloutRuleComparator
		return ret
	}
	return *o.Comparator
}

// GetComparatorOk returns a tuple with the Comparator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RolloutRuleModel) GetComparatorOk() (*RolloutRuleComparator, bool) {
	if o == nil || IsNil(o.Comparator) {
		return nil, false
	}
	return o.Comparator, true
}

// HasComparator returns a boolean if a field has been set.
func (o *RolloutRuleModel) HasComparator() bool {
	if o != nil && !IsNil(o.Comparator) {
		return true
	}

	return false
}

// SetComparator gets a reference to the given RolloutRuleComparator and assigns it to the Comparator field.
func (o *RolloutRuleModel) SetComparator(v RolloutRuleComparator) {
	o.Comparator = &v
}

// GetComparisonValue returns the ComparisonValue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RolloutRuleModel) GetComparisonValue() string {
	if o == nil || IsNil(o.ComparisonValue.Get()) {
		var ret string
		return ret
	}
	return *o.ComparisonValue.Get()
}

// GetComparisonValueOk returns a tuple with the ComparisonValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RolloutRuleModel) GetComparisonValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ComparisonValue.Get(), o.ComparisonValue.IsSet()
}

// HasComparisonValue returns a boolean if a field has been set.
func (o *RolloutRuleModel) HasComparisonValue() bool {
	if o != nil && o.ComparisonValue.IsSet() {
		return true
	}

	return false
}

// SetComparisonValue gets a reference to the given NullableString and assigns it to the ComparisonValue field.
func (o *RolloutRuleModel) SetComparisonValue(v string) {
	o.ComparisonValue.Set(&v)
}
// SetComparisonValueNil sets the value for ComparisonValue to be an explicit nil
func (o *RolloutRuleModel) SetComparisonValueNil() {
	o.ComparisonValue.Set(nil)
}

// UnsetComparisonValue ensures that no value is present for ComparisonValue, not even an explicit nil
func (o *RolloutRuleModel) UnsetComparisonValue() {
	o.ComparisonValue.Unset()
}

// GetValue returns the Value field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RolloutRuleModel) GetValue() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RolloutRuleModel) GetValueOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return &o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *RolloutRuleModel) HasValue() bool {
	if o != nil && IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given interface{} and assigns it to the Value field.
func (o *RolloutRuleModel) SetValue(v interface{}) {
	o.Value = v
}

// GetSegmentComparator returns the SegmentComparator field value if set, zero value otherwise.
func (o *RolloutRuleModel) GetSegmentComparator() SegmentComparator {
	if o == nil || IsNil(o.SegmentComparator) {
		var ret SegmentComparator
		return ret
	}
	return *o.SegmentComparator
}

// GetSegmentComparatorOk returns a tuple with the SegmentComparator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RolloutRuleModel) GetSegmentComparatorOk() (*SegmentComparator, bool) {
	if o == nil || IsNil(o.SegmentComparator) {
		return nil, false
	}
	return o.SegmentComparator, true
}

// HasSegmentComparator returns a boolean if a field has been set.
func (o *RolloutRuleModel) HasSegmentComparator() bool {
	if o != nil && !IsNil(o.SegmentComparator) {
		return true
	}

	return false
}

// SetSegmentComparator gets a reference to the given SegmentComparator and assigns it to the SegmentComparator field.
func (o *RolloutRuleModel) SetSegmentComparator(v SegmentComparator) {
	o.SegmentComparator = &v
}

// GetSegmentId returns the SegmentId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RolloutRuleModel) GetSegmentId() string {
	if o == nil || IsNil(o.SegmentId.Get()) {
		var ret string
		return ret
	}
	return *o.SegmentId.Get()
}

// GetSegmentIdOk returns a tuple with the SegmentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RolloutRuleModel) GetSegmentIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SegmentId.Get(), o.SegmentId.IsSet()
}

// HasSegmentId returns a boolean if a field has been set.
func (o *RolloutRuleModel) HasSegmentId() bool {
	if o != nil && o.SegmentId.IsSet() {
		return true
	}

	return false
}

// SetSegmentId gets a reference to the given NullableString and assigns it to the SegmentId field.
func (o *RolloutRuleModel) SetSegmentId(v string) {
	o.SegmentId.Set(&v)
}
// SetSegmentIdNil sets the value for SegmentId to be an explicit nil
func (o *RolloutRuleModel) SetSegmentIdNil() {
	o.SegmentId.Set(nil)
}

// UnsetSegmentId ensures that no value is present for SegmentId, not even an explicit nil
func (o *RolloutRuleModel) UnsetSegmentId() {
	o.SegmentId.Unset()
}

func (o RolloutRuleModel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RolloutRuleModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ComparisonAttribute.IsSet() {
		toSerialize["comparisonAttribute"] = o.ComparisonAttribute.Get()
	}
	if !IsNil(o.Comparator) {
		toSerialize["comparator"] = o.Comparator
	}
	if o.ComparisonValue.IsSet() {
		toSerialize["comparisonValue"] = o.ComparisonValue.Get()
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.SegmentComparator) {
		toSerialize["segmentComparator"] = o.SegmentComparator
	}
	if o.SegmentId.IsSet() {
		toSerialize["segmentId"] = o.SegmentId.Get()
	}
	return toSerialize, nil
}

type NullableRolloutRuleModel struct {
	value *RolloutRuleModel
	isSet bool
}

func (v NullableRolloutRuleModel) Get() *RolloutRuleModel {
	return v.value
}

func (v *NullableRolloutRuleModel) Set(val *RolloutRuleModel) {
	v.value = val
	v.isSet = true
}

func (v NullableRolloutRuleModel) IsSet() bool {
	return v.isSet
}

func (v *NullableRolloutRuleModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRolloutRuleModel(val *RolloutRuleModel) *NullableRolloutRuleModel {
	return &NullableRolloutRuleModel{value: val, isSet: true}
}

func (v NullableRolloutRuleModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRolloutRuleModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


