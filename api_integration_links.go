/*
ConfigCat Public Management API

The purpose of this API is to access the ConfigCat platform programmatically. You can **Create**, **Read**, **Update** and **Delete** any entities like **Feature Flags, Configs, Environments** or **Products** within ConfigCat.  **Base API URL**: https://test-api.configcat.com  If you prefer the swagger documentation, you can find it here: [Swagger UI](https://test-api.configcat.com/swagger).  The API is based on HTTP REST, uses resource-oriented URLs, status codes and supports JSON  format.   **Important:** Do not use this API for accessing and evaluating feature flag values. Use the [SDKs](https://configcat.com/docs/sdk-reference/overview) or the [ConfigCat Proxy](https://configcat.com/docs/advanced/proxy/proxy-overview/) instead.  # OpenAPI Specification  The complete specification is publicly available in the following formats:  - [OpenAPI v3](https://test-api.configcat.com/docs/v1/swagger.json) - [Swagger v2](https://test-api.configcat.com/docs/v1/swagger.v2.json)  You can use it to generate client libraries in various languages with [OpenAPI Generator](https://github.com/OpenAPITools/openapi-generator) or [Swagger Codegen](https://swagger.io/tools/swagger-codegen/) to interact with this API.  # Authentication This API uses the [Basic HTTP Authentication Scheme](https://en.wikipedia.org/wiki/Basic_access_authentication).   <!-- ReDoc-Inject: <security-definitions> -->  # Throttling and rate limits All the rate limited API calls are returning information about the current rate limit period in the following HTTP headers:  | Header | Description | | :- | :- | | X-Rate-Limit-Remaining | The maximum number of requests remaining in the current rate limit period. | | X-Rate-Limit-Reset     | The time when the current rate limit period resets.        |  When the rate limit is exceeded by a request, the API returns with a `HTTP 429 - Too many requests` status along with a `Retry-After` HTTP header. 

API version: v1
Contact: support@configcat.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configcatpublicapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// IntegrationLinksAPIService IntegrationLinksAPI service
type IntegrationLinksAPIService service

type IntegrationLinksAPIAddOrUpdateIntegrationLinkRequest struct {
	ctx context.Context
	ApiService *IntegrationLinksAPIService
	environmentId string
	settingId int32
	integrationLinkType IntegrationLinkType
	key string
	addOrUpdateIntegrationLinkModel *AddOrUpdateIntegrationLinkModel
}

func (r IntegrationLinksAPIAddOrUpdateIntegrationLinkRequest) AddOrUpdateIntegrationLinkModel(addOrUpdateIntegrationLinkModel AddOrUpdateIntegrationLinkModel) IntegrationLinksAPIAddOrUpdateIntegrationLinkRequest {
	r.addOrUpdateIntegrationLinkModel = &addOrUpdateIntegrationLinkModel
	return r
}

func (r IntegrationLinksAPIAddOrUpdateIntegrationLinkRequest) Execute() (*IntegrationLinkModel, *http.Response, error) {
	return r.ApiService.AddOrUpdateIntegrationLinkExecute(r)
}

/*
AddOrUpdateIntegrationLink Add or update Integration link



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param environmentId The identifier of the Environment.
 @param settingId The id of the Setting.
 @param integrationLinkType The integration link's type.
 @param key The key of the integration link.
 @return IntegrationLinksAPIAddOrUpdateIntegrationLinkRequest
*/
func (a *IntegrationLinksAPIService) AddOrUpdateIntegrationLink(ctx context.Context, environmentId string, settingId int32, integrationLinkType IntegrationLinkType, key string) IntegrationLinksAPIAddOrUpdateIntegrationLinkRequest {
	return IntegrationLinksAPIAddOrUpdateIntegrationLinkRequest{
		ApiService: a,
		ctx: ctx,
		environmentId: environmentId,
		settingId: settingId,
		integrationLinkType: integrationLinkType,
		key: key,
	}
}

// Execute executes the request
//  @return IntegrationLinkModel
func (a *IntegrationLinksAPIService) AddOrUpdateIntegrationLinkExecute(r IntegrationLinksAPIAddOrUpdateIntegrationLinkRequest) (*IntegrationLinkModel, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IntegrationLinkModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IntegrationLinksAPIService.AddOrUpdateIntegrationLink")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/environments/{environmentId}/settings/{settingId}/integrationLinks/{integrationLinkType}/{key}"
	localVarPath = strings.Replace(localVarPath, "{"+"environmentId"+"}", url.PathEscape(parameterValueToString(r.environmentId, "environmentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"settingId"+"}", url.PathEscape(parameterValueToString(r.settingId, "settingId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"integrationLinkType"+"}", url.PathEscape(parameterValueToString(r.integrationLinkType, "integrationLinkType")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"key"+"}", url.PathEscape(parameterValueToString(r.key, "key")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.addOrUpdateIntegrationLinkModel
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type IntegrationLinksAPIDeleteIntegrationLinkRequest struct {
	ctx context.Context
	ApiService *IntegrationLinksAPIService
	environmentId string
	settingId int32
	integrationLinkType IntegrationLinkType
	key string
}

func (r IntegrationLinksAPIDeleteIntegrationLinkRequest) Execute() (*DeleteIntegrationLinkModel, *http.Response, error) {
	return r.ApiService.DeleteIntegrationLinkExecute(r)
}

/*
DeleteIntegrationLink Delete Integration link



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param environmentId The identifier of the Environment.
 @param settingId The id of the Setting.
 @param integrationLinkType The integration's type.
 @param key The key of the integration link.
 @return IntegrationLinksAPIDeleteIntegrationLinkRequest
*/
func (a *IntegrationLinksAPIService) DeleteIntegrationLink(ctx context.Context, environmentId string, settingId int32, integrationLinkType IntegrationLinkType, key string) IntegrationLinksAPIDeleteIntegrationLinkRequest {
	return IntegrationLinksAPIDeleteIntegrationLinkRequest{
		ApiService: a,
		ctx: ctx,
		environmentId: environmentId,
		settingId: settingId,
		integrationLinkType: integrationLinkType,
		key: key,
	}
}

// Execute executes the request
//  @return DeleteIntegrationLinkModel
func (a *IntegrationLinksAPIService) DeleteIntegrationLinkExecute(r IntegrationLinksAPIDeleteIntegrationLinkRequest) (*DeleteIntegrationLinkModel, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DeleteIntegrationLinkModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IntegrationLinksAPIService.DeleteIntegrationLink")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/environments/{environmentId}/settings/{settingId}/integrationLinks/{integrationLinkType}/{key}"
	localVarPath = strings.Replace(localVarPath, "{"+"environmentId"+"}", url.PathEscape(parameterValueToString(r.environmentId, "environmentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"settingId"+"}", url.PathEscape(parameterValueToString(r.settingId, "settingId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"integrationLinkType"+"}", url.PathEscape(parameterValueToString(r.integrationLinkType, "integrationLinkType")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"key"+"}", url.PathEscape(parameterValueToString(r.key, "key")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type IntegrationLinksAPIGetIntegrationLinkDetailsRequest struct {
	ctx context.Context
	ApiService *IntegrationLinksAPIService
	integrationLinkType IntegrationLinkType
	key string
}

func (r IntegrationLinksAPIGetIntegrationLinkDetailsRequest) Execute() (*IntegrationLinkDetailsModel, *http.Response, error) {
	return r.ApiService.GetIntegrationLinkDetailsExecute(r)
}

/*
GetIntegrationLinkDetails Get Integration link



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param integrationLinkType The integration link's type.
 @param key The key of the integration link.
 @return IntegrationLinksAPIGetIntegrationLinkDetailsRequest
*/
func (a *IntegrationLinksAPIService) GetIntegrationLinkDetails(ctx context.Context, integrationLinkType IntegrationLinkType, key string) IntegrationLinksAPIGetIntegrationLinkDetailsRequest {
	return IntegrationLinksAPIGetIntegrationLinkDetailsRequest{
		ApiService: a,
		ctx: ctx,
		integrationLinkType: integrationLinkType,
		key: key,
	}
}

// Execute executes the request
//  @return IntegrationLinkDetailsModel
func (a *IntegrationLinksAPIService) GetIntegrationLinkDetailsExecute(r IntegrationLinksAPIGetIntegrationLinkDetailsRequest) (*IntegrationLinkDetailsModel, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IntegrationLinkDetailsModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IntegrationLinksAPIService.GetIntegrationLinkDetails")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/integrationLink/{integrationLinkType}/{key}/details"
	localVarPath = strings.Replace(localVarPath, "{"+"integrationLinkType"+"}", url.PathEscape(parameterValueToString(r.integrationLinkType, "integrationLinkType")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"key"+"}", url.PathEscape(parameterValueToString(r.key, "key")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type IntegrationLinksAPIJiraAddOrUpdateIntegrationLinkRequest struct {
	ctx context.Context
	ApiService *IntegrationLinksAPIService
	environmentId string
	settingId int32
	key string
	addOrUpdateJiraIntegrationLinkModel *AddOrUpdateJiraIntegrationLinkModel
}

func (r IntegrationLinksAPIJiraAddOrUpdateIntegrationLinkRequest) AddOrUpdateJiraIntegrationLinkModel(addOrUpdateJiraIntegrationLinkModel AddOrUpdateJiraIntegrationLinkModel) IntegrationLinksAPIJiraAddOrUpdateIntegrationLinkRequest {
	r.addOrUpdateJiraIntegrationLinkModel = &addOrUpdateJiraIntegrationLinkModel
	return r
}

func (r IntegrationLinksAPIJiraAddOrUpdateIntegrationLinkRequest) Execute() (*IntegrationLinkModel, *http.Response, error) {
	return r.ApiService.JiraAddOrUpdateIntegrationLinkExecute(r)
}

/*
JiraAddOrUpdateIntegrationLink Method for JiraAddOrUpdateIntegrationLink

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param environmentId The identifier of the Environment.
 @param settingId The id of the Setting.
 @param key The key of the integration link.
 @return IntegrationLinksAPIJiraAddOrUpdateIntegrationLinkRequest
*/
func (a *IntegrationLinksAPIService) JiraAddOrUpdateIntegrationLink(ctx context.Context, environmentId string, settingId int32, key string) IntegrationLinksAPIJiraAddOrUpdateIntegrationLinkRequest {
	return IntegrationLinksAPIJiraAddOrUpdateIntegrationLinkRequest{
		ApiService: a,
		ctx: ctx,
		environmentId: environmentId,
		settingId: settingId,
		key: key,
	}
}

// Execute executes the request
//  @return IntegrationLinkModel
func (a *IntegrationLinksAPIService) JiraAddOrUpdateIntegrationLinkExecute(r IntegrationLinksAPIJiraAddOrUpdateIntegrationLinkRequest) (*IntegrationLinkModel, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IntegrationLinkModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IntegrationLinksAPIService.JiraAddOrUpdateIntegrationLink")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/jira/environments/{environmentId}/settings/{settingId}/integrationLinks/{key}"
	localVarPath = strings.Replace(localVarPath, "{"+"environmentId"+"}", url.PathEscape(parameterValueToString(r.environmentId, "environmentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"settingId"+"}", url.PathEscape(parameterValueToString(r.settingId, "settingId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"key"+"}", url.PathEscape(parameterValueToString(r.key, "key")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.addOrUpdateJiraIntegrationLinkModel
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type IntegrationLinksAPIJiraConnectRequest struct {
	ctx context.Context
	ApiService *IntegrationLinksAPIService
	connectRequest *ConnectRequest
}

func (r IntegrationLinksAPIJiraConnectRequest) ConnectRequest(connectRequest ConnectRequest) IntegrationLinksAPIJiraConnectRequest {
	r.connectRequest = &connectRequest
	return r
}

func (r IntegrationLinksAPIJiraConnectRequest) Execute() (*http.Response, error) {
	return r.ApiService.JiraConnectExecute(r)
}

/*
JiraConnect Method for JiraConnect

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return IntegrationLinksAPIJiraConnectRequest
*/
func (a *IntegrationLinksAPIService) JiraConnect(ctx context.Context) IntegrationLinksAPIJiraConnectRequest {
	return IntegrationLinksAPIJiraConnectRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *IntegrationLinksAPIService) JiraConnectExecute(r IntegrationLinksAPIJiraConnectRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IntegrationLinksAPIService.JiraConnect")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/jira/connect"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.connectRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
