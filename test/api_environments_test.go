/*
ConfigCat Public Management API

Testing EnvironmentsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package configcat-publicapi-go-client

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_configcat-publicapi-go-client_EnvironmentsApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test EnvironmentsApiService CreateEnvironment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productId string

		resp, httpRes, err := apiClient.EnvironmentsApi.CreateEnvironment(context.Background(), productId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EnvironmentsApiService DeleteEnvironment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentId string

		httpRes, err := apiClient.EnvironmentsApi.DeleteEnvironment(context.Background(), environmentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EnvironmentsApiService GetEnvironment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentId string

		resp, httpRes, err := apiClient.EnvironmentsApi.GetEnvironment(context.Background(), environmentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EnvironmentsApiService GetEnvironments", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productId string

		resp, httpRes, err := apiClient.EnvironmentsApi.GetEnvironments(context.Background(), productId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EnvironmentsApiService UpdateEnvironment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentId string

		resp, httpRes, err := apiClient.EnvironmentsApi.UpdateEnvironment(context.Background(), environmentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
