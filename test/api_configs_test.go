/*
ConfigCat Public Management API

Testing ConfigsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package configcatpublicapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/configcat/configcat-publicapi-go-client"
)

func Test_configcatpublicapi_ConfigsApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ConfigsApiService CreateConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productId string

		resp, httpRes, err := apiClient.ConfigsApi.CreateConfig(context.Background(), productId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigsApiService DeleteConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var configId string

		httpRes, err := apiClient.ConfigsApi.DeleteConfig(context.Background(), configId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigsApiService GetConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var configId string

		resp, httpRes, err := apiClient.ConfigsApi.GetConfig(context.Background(), configId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigsApiService GetConfigs", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productId string

		resp, httpRes, err := apiClient.ConfigsApi.GetConfigs(context.Background(), productId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigsApiService UpdateConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var configId string

		resp, httpRes, err := apiClient.ConfigsApi.UpdateConfig(context.Background(), configId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
