/*
ConfigCat Public Management API

Testing IntegrationLinksApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package configcat-publicapi-go-client

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_configcat-publicapi-go-client_IntegrationLinksApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test IntegrationLinksApiService AddOrUpdateIntegrationLink", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentId string
		var settingId int32
		var integrationLinkType IntegrationLinkType
		var key string

		resp, httpRes, err := apiClient.IntegrationLinksApi.AddOrUpdateIntegrationLink(context.Background(), environmentId, settingId, integrationLinkType, key).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IntegrationLinksApiService DeleteIntegrationLink", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentId string
		var settingId int32
		var integrationLinkType IntegrationLinkType
		var key string

		resp, httpRes, err := apiClient.IntegrationLinksApi.DeleteIntegrationLink(context.Background(), environmentId, settingId, integrationLinkType, key).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IntegrationLinksApiService GetIntegrationLinkDetails", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var integrationLinkType IntegrationLinkType
		var key string

		resp, httpRes, err := apiClient.IntegrationLinksApi.GetIntegrationLinkDetails(context.Background(), integrationLinkType, key).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IntegrationLinksApiService JiraAddOrUpdateIntegrationLink", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentId string
		var settingId int32
		var key string

		resp, httpRes, err := apiClient.IntegrationLinksApi.JiraAddOrUpdateIntegrationLink(context.Background(), environmentId, settingId, key).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IntegrationLinksApiService V1JiraConnectPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.IntegrationLinksApi.V1JiraConnectPost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
