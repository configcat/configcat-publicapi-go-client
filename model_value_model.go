/*
ConfigCat Public Management API

The purpose of this API is to access the ConfigCat platform programmatically. You can **Create**, **Read**, **Update** and **Delete** any entities like **Feature Flags, Configs, Environments** or **Products** within ConfigCat.  **Base API URL**: https://test-api.configcat.com  If you prefer the swagger documentation, you can find it here: [Swagger UI](https://test-api.configcat.com/swagger).  The API is based on HTTP REST, uses resource-oriented URLs, status codes and supports JSON  format. Do not use this API for accessing and evaluating feature flag values. Use the [SDKs instead](https://configcat.com/docs/sdk-reference/overview).   # OpenAPI Specification  The complete specification is publicly available in the following formats:  - [OpenAPI v3](https://test-api.configcat.com/docs/v1/swagger.json) - [Swagger v2](https://test-api.configcat.com/docs/v1/swagger.v2.json)  You can use it to generate client libraries in various languages with [OpenAPI Generator](https://github.com/OpenAPITools/openapi-generator) or [Swagger Codegen](https://swagger.io/tools/swagger-codegen/) to interact with this API.  # Authentication This API uses the [Basic HTTP Authentication Scheme](https://en.wikipedia.org/wiki/Basic_access_authentication).   <!-- ReDoc-Inject: <security-definitions> -->  # Throttling and rate limits All the rate limited API calls are returning information about the current rate limit period in the following HTTP headers:  | Header | Description | | :- | :- | | X-Rate-Limit-Remaining | The maximum number of requests remaining in the current rate limit period. | | X-Rate-Limit-Reset     | The time when the current rate limit period resets.        |  When the rate limit is exceeded by a request, the API returns with a `HTTP 429 - Too many requests` status along with a `Retry-After` HTTP header. 

API version: v1
Contact: support@configcat.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configcatpublicapi

import (
	"encoding/json"
)

// checks if the ValueModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ValueModel{}

// ValueModel Represents the value of a Feature Flag or Setting.
type ValueModel struct {
	// The served value in case of a boolean Feature Flag.
	BoolValue NullableBool `json:"boolValue,omitempty"`
	// The served value in case of a text Setting.
	StringValue NullableString `json:"stringValue,omitempty"`
	// The served value in case of a whole number Setting.
	IntValue NullableInt32 `json:"intValue,omitempty"`
	// The served value in case of a decimal number Setting.
	DoubleValue NullableFloat64 `json:"doubleValue,omitempty"`
}

// NewValueModel instantiates a new ValueModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewValueModel() *ValueModel {
	this := ValueModel{}
	return &this
}

// NewValueModelWithDefaults instantiates a new ValueModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewValueModelWithDefaults() *ValueModel {
	this := ValueModel{}
	return &this
}

// GetBoolValue returns the BoolValue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ValueModel) GetBoolValue() bool {
	if o == nil || IsNil(o.BoolValue.Get()) {
		var ret bool
		return ret
	}
	return *o.BoolValue.Get()
}

// GetBoolValueOk returns a tuple with the BoolValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ValueModel) GetBoolValueOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.BoolValue.Get(), o.BoolValue.IsSet()
}

// HasBoolValue returns a boolean if a field has been set.
func (o *ValueModel) HasBoolValue() bool {
	if o != nil && o.BoolValue.IsSet() {
		return true
	}

	return false
}

// SetBoolValue gets a reference to the given NullableBool and assigns it to the BoolValue field.
func (o *ValueModel) SetBoolValue(v bool) {
	o.BoolValue.Set(&v)
}
// SetBoolValueNil sets the value for BoolValue to be an explicit nil
func (o *ValueModel) SetBoolValueNil() {
	o.BoolValue.Set(nil)
}

// UnsetBoolValue ensures that no value is present for BoolValue, not even an explicit nil
func (o *ValueModel) UnsetBoolValue() {
	o.BoolValue.Unset()
}

// GetStringValue returns the StringValue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ValueModel) GetStringValue() string {
	if o == nil || IsNil(o.StringValue.Get()) {
		var ret string
		return ret
	}
	return *o.StringValue.Get()
}

// GetStringValueOk returns a tuple with the StringValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ValueModel) GetStringValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.StringValue.Get(), o.StringValue.IsSet()
}

// HasStringValue returns a boolean if a field has been set.
func (o *ValueModel) HasStringValue() bool {
	if o != nil && o.StringValue.IsSet() {
		return true
	}

	return false
}

// SetStringValue gets a reference to the given NullableString and assigns it to the StringValue field.
func (o *ValueModel) SetStringValue(v string) {
	o.StringValue.Set(&v)
}
// SetStringValueNil sets the value for StringValue to be an explicit nil
func (o *ValueModel) SetStringValueNil() {
	o.StringValue.Set(nil)
}

// UnsetStringValue ensures that no value is present for StringValue, not even an explicit nil
func (o *ValueModel) UnsetStringValue() {
	o.StringValue.Unset()
}

// GetIntValue returns the IntValue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ValueModel) GetIntValue() int32 {
	if o == nil || IsNil(o.IntValue.Get()) {
		var ret int32
		return ret
	}
	return *o.IntValue.Get()
}

// GetIntValueOk returns a tuple with the IntValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ValueModel) GetIntValueOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.IntValue.Get(), o.IntValue.IsSet()
}

// HasIntValue returns a boolean if a field has been set.
func (o *ValueModel) HasIntValue() bool {
	if o != nil && o.IntValue.IsSet() {
		return true
	}

	return false
}

// SetIntValue gets a reference to the given NullableInt32 and assigns it to the IntValue field.
func (o *ValueModel) SetIntValue(v int32) {
	o.IntValue.Set(&v)
}
// SetIntValueNil sets the value for IntValue to be an explicit nil
func (o *ValueModel) SetIntValueNil() {
	o.IntValue.Set(nil)
}

// UnsetIntValue ensures that no value is present for IntValue, not even an explicit nil
func (o *ValueModel) UnsetIntValue() {
	o.IntValue.Unset()
}

// GetDoubleValue returns the DoubleValue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ValueModel) GetDoubleValue() float64 {
	if o == nil || IsNil(o.DoubleValue.Get()) {
		var ret float64
		return ret
	}
	return *o.DoubleValue.Get()
}

// GetDoubleValueOk returns a tuple with the DoubleValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ValueModel) GetDoubleValueOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.DoubleValue.Get(), o.DoubleValue.IsSet()
}

// HasDoubleValue returns a boolean if a field has been set.
func (o *ValueModel) HasDoubleValue() bool {
	if o != nil && o.DoubleValue.IsSet() {
		return true
	}

	return false
}

// SetDoubleValue gets a reference to the given NullableFloat64 and assigns it to the DoubleValue field.
func (o *ValueModel) SetDoubleValue(v float64) {
	o.DoubleValue.Set(&v)
}
// SetDoubleValueNil sets the value for DoubleValue to be an explicit nil
func (o *ValueModel) SetDoubleValueNil() {
	o.DoubleValue.Set(nil)
}

// UnsetDoubleValue ensures that no value is present for DoubleValue, not even an explicit nil
func (o *ValueModel) UnsetDoubleValue() {
	o.DoubleValue.Unset()
}

func (o ValueModel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ValueModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.BoolValue.IsSet() {
		toSerialize["boolValue"] = o.BoolValue.Get()
	}
	if o.StringValue.IsSet() {
		toSerialize["stringValue"] = o.StringValue.Get()
	}
	if o.IntValue.IsSet() {
		toSerialize["intValue"] = o.IntValue.Get()
	}
	if o.DoubleValue.IsSet() {
		toSerialize["doubleValue"] = o.DoubleValue.Get()
	}
	return toSerialize, nil
}

type NullableValueModel struct {
	value *ValueModel
	isSet bool
}

func (v NullableValueModel) Get() *ValueModel {
	return v.value
}

func (v *NullableValueModel) Set(val *ValueModel) {
	v.value = val
	v.isSet = true
}

func (v NullableValueModel) IsSet() bool {
	return v.isSet
}

func (v *NullableValueModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValueModel(val *ValueModel) *NullableValueModel {
	return &NullableValueModel{value: val, isSet: true}
}

func (v NullableValueModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValueModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


