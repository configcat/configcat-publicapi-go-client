/*
ConfigCat Public Management API

The purpose of this API is to access the ConfigCat platform programmatically. You can **Create**, **Read**, **Update** and **Delete** any entities like **Feature Flags, Configs, Environments** or **Products** within ConfigCat.  **Base API URL**: https://test-api.configcat.com  If you prefer the swagger documentation, you can find it here: [Swagger UI](https://test-api.configcat.com/swagger).  The API is based on HTTP REST, uses resource-oriented URLs, status codes and supports JSON  format. Do not use this API for accessing and evaluating feature flag values. Use the [SDKs instead](https://configcat.com/docs/sdk-reference/overview).   # OpenAPI Specification  The complete specification is publicly available in the following formats:  - [OpenAPI v3](https://test-api.configcat.com/docs/v1/swagger.json) - [Swagger v2](https://test-api.configcat.com/docs/v1/swagger.v2.json)  You can use it to generate client libraries in various languages with [OpenAPI Generator](https://github.com/OpenAPITools/openapi-generator) or [Swagger Codegen](https://swagger.io/tools/swagger-codegen/) to interact with this API.  # Authentication This API uses the [Basic HTTP Authentication Scheme](https://en.wikipedia.org/wiki/Basic_access_authentication).   <!-- ReDoc-Inject: <security-definitions> -->  # Throttling and rate limits All the rate limited API calls are returning information about the current rate limit period in the following HTTP headers:  | Header | Description | | :- | :- | | X-Rate-Limit-Remaining | The maximum number of requests remaining in the current rate limit period. | | X-Rate-Limit-Reset     | The time when the current rate limit period resets.        |  When the rate limit is exceeded by a request, the API returns with a `HTTP 429 - Too many requests` status along with a `Retry-After` HTTP header. 

API version: v1
Contact: support@configcat.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configcatpublicapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// FeatureFlagSettingValuesUsingSDKKeyApiService FeatureFlagSettingValuesUsingSDKKeyApi service
type FeatureFlagSettingValuesUsingSDKKeyApiService service

type FeatureFlagSettingValuesUsingSDKKeyApiGetSettingValueBySdkkeyRequest struct {
	ctx context.Context
	ApiService *FeatureFlagSettingValuesUsingSDKKeyApiService
	settingKeyOrId string
	xCONFIGCATSDKKEY *string
}

// The ConfigCat SDK Key. (https://app.configcat.com/sdkkey)
func (r FeatureFlagSettingValuesUsingSDKKeyApiGetSettingValueBySdkkeyRequest) XCONFIGCATSDKKEY(xCONFIGCATSDKKEY string) FeatureFlagSettingValuesUsingSDKKeyApiGetSettingValueBySdkkeyRequest {
	r.xCONFIGCATSDKKEY = &xCONFIGCATSDKKEY
	return r
}

func (r FeatureFlagSettingValuesUsingSDKKeyApiGetSettingValueBySdkkeyRequest) Execute() (*SettingValueModel, *http.Response, error) {
	return r.ApiService.GetSettingValueBySdkkeyExecute(r)
}

/*
GetSettingValueBySdkkey Get value

This endpoint returns the value of a Feature Flag or Setting 
in a specified Environment identified by the <a target="_blank" rel="noopener noreferrer" href="https://app.configcat.com/sdkkey">SDK key</a> passed in the `X-CONFIGCAT-SDKKEY` header.

The most important attributes in the response are the `value`, `rolloutRules` and `percentageRules`.
The `value` represents what the clients will get when the evaluation requests of our SDKs 
are not matching to any of the defined Targeting or Percentage Rules, or when there are no additional rules to evaluate.

The `rolloutRules` and `percentageRules` attributes are representing the current 
Targeting and Percentage Rules configuration of the actual Feature Flag or Setting 
in an **ordered** collection, which means the order of the returned rules is matching to the
evaluation order. You can read more about these rules [here](https://configcat.com/docs/targeting/targeting-overview/).

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param settingKeyOrId The key or id of the Setting.
 @return FeatureFlagSettingValuesUsingSDKKeyApiGetSettingValueBySdkkeyRequest
*/
func (a *FeatureFlagSettingValuesUsingSDKKeyApiService) GetSettingValueBySdkkey(ctx context.Context, settingKeyOrId string) FeatureFlagSettingValuesUsingSDKKeyApiGetSettingValueBySdkkeyRequest {
	return FeatureFlagSettingValuesUsingSDKKeyApiGetSettingValueBySdkkeyRequest{
		ApiService: a,
		ctx: ctx,
		settingKeyOrId: settingKeyOrId,
	}
}

// Execute executes the request
//  @return SettingValueModel
func (a *FeatureFlagSettingValuesUsingSDKKeyApiService) GetSettingValueBySdkkeyExecute(r FeatureFlagSettingValuesUsingSDKKeyApiGetSettingValueBySdkkeyRequest) (*SettingValueModel, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SettingValueModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FeatureFlagSettingValuesUsingSDKKeyApiService.GetSettingValueBySdkkey")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/settings/{settingKeyOrId}/value"
	localVarPath = strings.Replace(localVarPath, "{"+"settingKeyOrId"+"}", url.PathEscape(parameterValueToString(r.settingKeyOrId, "settingKeyOrId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xCONFIGCATSDKKEY != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-CONFIGCAT-SDKKEY", r.xCONFIGCATSDKKEY, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type FeatureFlagSettingValuesUsingSDKKeyApiReplaceSettingValueBySdkkeyRequest struct {
	ctx context.Context
	ApiService *FeatureFlagSettingValuesUsingSDKKeyApiService
	settingKeyOrId string
	updateSettingValueModel *UpdateSettingValueModel
	reason *string
	xCONFIGCATSDKKEY *string
}

func (r FeatureFlagSettingValuesUsingSDKKeyApiReplaceSettingValueBySdkkeyRequest) UpdateSettingValueModel(updateSettingValueModel UpdateSettingValueModel) FeatureFlagSettingValuesUsingSDKKeyApiReplaceSettingValueBySdkkeyRequest {
	r.updateSettingValueModel = &updateSettingValueModel
	return r
}

// The reason note for the Audit Log if the Product&#39;s \&quot;Config changes require a reason\&quot; preference is turned on.
func (r FeatureFlagSettingValuesUsingSDKKeyApiReplaceSettingValueBySdkkeyRequest) Reason(reason string) FeatureFlagSettingValuesUsingSDKKeyApiReplaceSettingValueBySdkkeyRequest {
	r.reason = &reason
	return r
}

// The ConfigCat SDK Key. (https://app.configcat.com/sdkkey)
func (r FeatureFlagSettingValuesUsingSDKKeyApiReplaceSettingValueBySdkkeyRequest) XCONFIGCATSDKKEY(xCONFIGCATSDKKEY string) FeatureFlagSettingValuesUsingSDKKeyApiReplaceSettingValueBySdkkeyRequest {
	r.xCONFIGCATSDKKEY = &xCONFIGCATSDKKEY
	return r
}

func (r FeatureFlagSettingValuesUsingSDKKeyApiReplaceSettingValueBySdkkeyRequest) Execute() (*SettingValueModel, *http.Response, error) {
	return r.ApiService.ReplaceSettingValueBySdkkeyExecute(r)
}

/*
ReplaceSettingValueBySdkkey Replace value

This endpoint replaces the value of a Feature Flag or Setting 
in a specified Environment identified by the <a target="_blank" rel="noopener noreferrer" href="https://app.configcat.com/sdkkey">SDK key</a> passed in the `X-CONFIGCAT-SDKKEY` header.

Only the `value`, `rolloutRules` and `percentageRules` attributes are modifiable by this endpoint.

**Important:** As this endpoint is doing a complete replace, it's important to set every other attribute that you don't 
want to change to its original state. Not listing one means that it will reset.

For example: We have the following resource.
```json
{
  "rolloutPercentageItems": [
    {
      "percentage": 30,
      "value": true
    },
    {
      "percentage": 70,
      "value": false
    }
  ],
  "rolloutRules": [],
  "value": false
}
```
If we send a replace request body as below:
```json
{
  "value": true
}
```
Then besides that the default served value is set to `true`, all the Percentage Rules are deleted. 
So we get a response like this:
```json
{
  "rolloutPercentageItems": [],
  "rolloutRules": [],
  "value": true
}
```

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param settingKeyOrId The key or id of the Setting.
 @return FeatureFlagSettingValuesUsingSDKKeyApiReplaceSettingValueBySdkkeyRequest
*/
func (a *FeatureFlagSettingValuesUsingSDKKeyApiService) ReplaceSettingValueBySdkkey(ctx context.Context, settingKeyOrId string) FeatureFlagSettingValuesUsingSDKKeyApiReplaceSettingValueBySdkkeyRequest {
	return FeatureFlagSettingValuesUsingSDKKeyApiReplaceSettingValueBySdkkeyRequest{
		ApiService: a,
		ctx: ctx,
		settingKeyOrId: settingKeyOrId,
	}
}

// Execute executes the request
//  @return SettingValueModel
func (a *FeatureFlagSettingValuesUsingSDKKeyApiService) ReplaceSettingValueBySdkkeyExecute(r FeatureFlagSettingValuesUsingSDKKeyApiReplaceSettingValueBySdkkeyRequest) (*SettingValueModel, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SettingValueModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FeatureFlagSettingValuesUsingSDKKeyApiService.ReplaceSettingValueBySdkkey")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/settings/{settingKeyOrId}/value"
	localVarPath = strings.Replace(localVarPath, "{"+"settingKeyOrId"+"}", url.PathEscape(parameterValueToString(r.settingKeyOrId, "settingKeyOrId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateSettingValueModel == nil {
		return localVarReturnValue, nil, reportError("updateSettingValueModel is required and must be specified")
	}

	if r.reason != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "reason", r.reason, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xCONFIGCATSDKKEY != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-CONFIGCAT-SDKKEY", r.xCONFIGCATSDKKEY, "")
	}
	// body params
	localVarPostBody = r.updateSettingValueModel
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type FeatureFlagSettingValuesUsingSDKKeyApiUpdateSettingValueBySdkkeyRequest struct {
	ctx context.Context
	ApiService *FeatureFlagSettingValuesUsingSDKKeyApiService
	settingKeyOrId string
	jsonPatchOperation *[]JsonPatchOperation
	reason *string
	xCONFIGCATSDKKEY *string
}

func (r FeatureFlagSettingValuesUsingSDKKeyApiUpdateSettingValueBySdkkeyRequest) JsonPatchOperation(jsonPatchOperation []JsonPatchOperation) FeatureFlagSettingValuesUsingSDKKeyApiUpdateSettingValueBySdkkeyRequest {
	r.jsonPatchOperation = &jsonPatchOperation
	return r
}

// The reason note for the Audit Log if the Product&#39;s \&quot;Config changes require a reason\&quot; preference is turned on.
func (r FeatureFlagSettingValuesUsingSDKKeyApiUpdateSettingValueBySdkkeyRequest) Reason(reason string) FeatureFlagSettingValuesUsingSDKKeyApiUpdateSettingValueBySdkkeyRequest {
	r.reason = &reason
	return r
}

// The ConfigCat SDK Key. (https://app.configcat.com/sdkkey)
func (r FeatureFlagSettingValuesUsingSDKKeyApiUpdateSettingValueBySdkkeyRequest) XCONFIGCATSDKKEY(xCONFIGCATSDKKEY string) FeatureFlagSettingValuesUsingSDKKeyApiUpdateSettingValueBySdkkeyRequest {
	r.xCONFIGCATSDKKEY = &xCONFIGCATSDKKEY
	return r
}

func (r FeatureFlagSettingValuesUsingSDKKeyApiUpdateSettingValueBySdkkeyRequest) Execute() (*SettingValueModel, *http.Response, error) {
	return r.ApiService.UpdateSettingValueBySdkkeyExecute(r)
}

/*
UpdateSettingValueBySdkkey Update value

This endpoint updates the value of a Feature Flag or Setting 
with a collection of [JSON Patch](https://jsonpatch.com) operations in a specified Environment
identified by the <a target="_blank" rel="noopener noreferrer" href="https://app.configcat.com/sdkkey">SDK key</a> passed in the `X-CONFIGCAT-SDKKEY` header.

Only the `value`, `rolloutRules` and `percentageRules` attributes are modifiable by this endpoint.

The advantage of using JSON Patch is that you can describe individual update operations on a resource
without touching attributes that you don't want to change. It supports collection reordering, so it also 
can be used for reordering the targeting rules of a Feature Flag or Setting.

For example: We have the following resource.
```json
{
  "rolloutPercentageItems": [
    {
      "percentage": 30,
      "value": true
    },
    {
      "percentage": 70,
      "value": false
    }
  ],
  "rolloutRules": [],
  "value": false
}
```
If we send an update request body as below:
```json
[
  {
    "op": "replace",
    "path": "/value",
    "value": true
  }
]
```
Only the default served value is going to be set to `true` and all the Percentage Rules are remaining unchanged.
So we get a response like this:
```json
{
  "rolloutPercentageItems": [
    {
      "percentage": 30,
      "value": true
    },
    {
      "percentage": 70,
      "value": false
    }
  ],
  "rolloutRules": [],
  "value": true
}
```

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param settingKeyOrId The key or id of the Setting.
 @return FeatureFlagSettingValuesUsingSDKKeyApiUpdateSettingValueBySdkkeyRequest
*/
func (a *FeatureFlagSettingValuesUsingSDKKeyApiService) UpdateSettingValueBySdkkey(ctx context.Context, settingKeyOrId string) FeatureFlagSettingValuesUsingSDKKeyApiUpdateSettingValueBySdkkeyRequest {
	return FeatureFlagSettingValuesUsingSDKKeyApiUpdateSettingValueBySdkkeyRequest{
		ApiService: a,
		ctx: ctx,
		settingKeyOrId: settingKeyOrId,
	}
}

// Execute executes the request
//  @return SettingValueModel
func (a *FeatureFlagSettingValuesUsingSDKKeyApiService) UpdateSettingValueBySdkkeyExecute(r FeatureFlagSettingValuesUsingSDKKeyApiUpdateSettingValueBySdkkeyRequest) (*SettingValueModel, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SettingValueModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FeatureFlagSettingValuesUsingSDKKeyApiService.UpdateSettingValueBySdkkey")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/settings/{settingKeyOrId}/value"
	localVarPath = strings.Replace(localVarPath, "{"+"settingKeyOrId"+"}", url.PathEscape(parameterValueToString(r.settingKeyOrId, "settingKeyOrId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.jsonPatchOperation == nil {
		return localVarReturnValue, nil, reportError("jsonPatchOperation is required and must be specified")
	}

	if r.reason != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "reason", r.reason, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xCONFIGCATSDKKEY != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-CONFIGCAT-SDKKEY", r.xCONFIGCATSDKKEY, "")
	}
	// body params
	localVarPostBody = r.jsonPatchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
