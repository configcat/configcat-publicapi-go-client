/*
ConfigCat Public Management API

The purpose of this API is to access the ConfigCat platform programmatically. You can **Create**, **Read**, **Update** and **Delete** any entities like **Feature Flags, Configs, Environments** or **Products** within ConfigCat.  **Base API URL**: https://test-api.configcat.com  If you prefer the swagger documentation, you can find it here: [Swagger UI](https://test-api.configcat.com/swagger).  The API is based on HTTP REST, uses resource-oriented URLs, status codes and supports JSON  format.   **Important:** Do not use this API for accessing and evaluating feature flag values. Use the [SDKs](https://configcat.com/docs/sdk-reference/overview) or the [ConfigCat Proxy](https://configcat.com/docs/advanced/proxy/proxy-overview/) instead.  # OpenAPI Specification  The complete specification is publicly available in the following formats:  - [OpenAPI v3](https://test-api.configcat.com/docs/v1/swagger.json) - [Swagger v2](https://test-api.configcat.com/docs/v1/swagger.v2.json)  You can use it to generate client libraries in various languages with [OpenAPI Generator](https://github.com/OpenAPITools/openapi-generator) or [Swagger Codegen](https://swagger.io/tools/swagger-codegen/) to interact with this API.  # Authentication This API uses the [Basic HTTP Authentication Scheme](https://en.wikipedia.org/wiki/Basic_access_authentication).   <!-- ReDoc-Inject: <security-definitions> -->  # Throttling and rate limits All the rate limited API calls are returning information about the current rate limit period in the following HTTP headers:  | Header | Description | | :- | :- | | X-Rate-Limit-Remaining | The maximum number of requests remaining in the current rate limit period. | | X-Rate-Limit-Reset     | The time when the current rate limit period resets.        |  When the rate limit is exceeded by a request, the API returns with a `HTTP 429 - Too many requests` status along with a `Retry-After` HTTP header. 

API version: v1
Contact: support@configcat.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configcatpublicapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"
)


// AuditLogsAPIService AuditLogsAPI service
type AuditLogsAPIService service

type AuditLogsAPIGetAuditlogsRequest struct {
	ctx context.Context
	ApiService *AuditLogsAPIService
	productId string
	configId *string
	environmentId *string
	auditLogType *AuditLogType
	fromUtcDateTime *time.Time
	toUtcDateTime *time.Time
}

// The identifier of the Config.
func (r AuditLogsAPIGetAuditlogsRequest) ConfigId(configId string) AuditLogsAPIGetAuditlogsRequest {
	r.configId = &configId
	return r
}

// The identifier of the Environment.
func (r AuditLogsAPIGetAuditlogsRequest) EnvironmentId(environmentId string) AuditLogsAPIGetAuditlogsRequest {
	r.environmentId = &environmentId
	return r
}

// Filter Audit logs by Audit log type.
func (r AuditLogsAPIGetAuditlogsRequest) AuditLogType(auditLogType AuditLogType) AuditLogsAPIGetAuditlogsRequest {
	r.auditLogType = &auditLogType
	return r
}

// Filter Audit logs by starting UTC date.
func (r AuditLogsAPIGetAuditlogsRequest) FromUtcDateTime(fromUtcDateTime time.Time) AuditLogsAPIGetAuditlogsRequest {
	r.fromUtcDateTime = &fromUtcDateTime
	return r
}

// Filter Audit logs by ending UTC date.
func (r AuditLogsAPIGetAuditlogsRequest) ToUtcDateTime(toUtcDateTime time.Time) AuditLogsAPIGetAuditlogsRequest {
	r.toUtcDateTime = &toUtcDateTime
	return r
}

func (r AuditLogsAPIGetAuditlogsRequest) Execute() ([]AuditLogItemModel, *http.Response, error) {
	return r.ApiService.GetAuditlogsExecute(r)
}

/*
GetAuditlogs List Audit log items for Product

This endpoint returns the list of Audit log items for a given Product 
and the result can be optionally filtered by Config and/or Environment.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param productId The identifier of the Product.
 @return AuditLogsAPIGetAuditlogsRequest
*/
func (a *AuditLogsAPIService) GetAuditlogs(ctx context.Context, productId string) AuditLogsAPIGetAuditlogsRequest {
	return AuditLogsAPIGetAuditlogsRequest{
		ApiService: a,
		ctx: ctx,
		productId: productId,
	}
}

// Execute executes the request
//  @return []AuditLogItemModel
func (a *AuditLogsAPIService) GetAuditlogsExecute(r AuditLogsAPIGetAuditlogsRequest) ([]AuditLogItemModel, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []AuditLogItemModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuditLogsAPIService.GetAuditlogs")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/products/{productId}/auditlogs"
	localVarPath = strings.Replace(localVarPath, "{"+"productId"+"}", url.PathEscape(parameterValueToString(r.productId, "productId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.configId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "configId", r.configId, "")
	}
	if r.environmentId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "environmentId", r.environmentId, "")
	}
	if r.auditLogType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "auditLogType", r.auditLogType, "")
	}
	if r.fromUtcDateTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fromUtcDateTime", r.fromUtcDateTime, "")
	}
	if r.toUtcDateTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "toUtcDateTime", r.toUtcDateTime, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AuditLogsAPIGetDeletedSettingsRequest struct {
	ctx context.Context
	ApiService *AuditLogsAPIService
	configId string
}

func (r AuditLogsAPIGetDeletedSettingsRequest) Execute() ([]SettingModel, *http.Response, error) {
	return r.ApiService.GetDeletedSettingsExecute(r)
}

/*
GetDeletedSettings List Deleted Settings

This endpoint returns the list of Feature Flags and Settings that were deleted from the given Config.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param configId The identifier of the Config.
 @return AuditLogsAPIGetDeletedSettingsRequest
*/
func (a *AuditLogsAPIService) GetDeletedSettings(ctx context.Context, configId string) AuditLogsAPIGetDeletedSettingsRequest {
	return AuditLogsAPIGetDeletedSettingsRequest{
		ApiService: a,
		ctx: ctx,
		configId: configId,
	}
}

// Execute executes the request
//  @return []SettingModel
func (a *AuditLogsAPIService) GetDeletedSettingsExecute(r AuditLogsAPIGetDeletedSettingsRequest) ([]SettingModel, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []SettingModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuditLogsAPIService.GetDeletedSettings")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/configs/{configId}/deleted-settings"
	localVarPath = strings.Replace(localVarPath, "{"+"configId"+"}", url.PathEscape(parameterValueToString(r.configId, "configId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AuditLogsAPIGetOrganizationAuditlogsRequest struct {
	ctx context.Context
	ApiService *AuditLogsAPIService
	organizationId string
	productId *string
	configId *string
	environmentId *string
	auditLogType *AuditLogType
	fromUtcDateTime *time.Time
	toUtcDateTime *time.Time
}

// The identifier of the Product.
func (r AuditLogsAPIGetOrganizationAuditlogsRequest) ProductId(productId string) AuditLogsAPIGetOrganizationAuditlogsRequest {
	r.productId = &productId
	return r
}

// The identifier of the Config.
func (r AuditLogsAPIGetOrganizationAuditlogsRequest) ConfigId(configId string) AuditLogsAPIGetOrganizationAuditlogsRequest {
	r.configId = &configId
	return r
}

// The identifier of the Environment.
func (r AuditLogsAPIGetOrganizationAuditlogsRequest) EnvironmentId(environmentId string) AuditLogsAPIGetOrganizationAuditlogsRequest {
	r.environmentId = &environmentId
	return r
}

// Filter Audit logs by Audit log type.
func (r AuditLogsAPIGetOrganizationAuditlogsRequest) AuditLogType(auditLogType AuditLogType) AuditLogsAPIGetOrganizationAuditlogsRequest {
	r.auditLogType = &auditLogType
	return r
}

// Filter Audit logs by starting UTC date.
func (r AuditLogsAPIGetOrganizationAuditlogsRequest) FromUtcDateTime(fromUtcDateTime time.Time) AuditLogsAPIGetOrganizationAuditlogsRequest {
	r.fromUtcDateTime = &fromUtcDateTime
	return r
}

// Filter Audit logs by ending UTC date.
func (r AuditLogsAPIGetOrganizationAuditlogsRequest) ToUtcDateTime(toUtcDateTime time.Time) AuditLogsAPIGetOrganizationAuditlogsRequest {
	r.toUtcDateTime = &toUtcDateTime
	return r
}

func (r AuditLogsAPIGetOrganizationAuditlogsRequest) Execute() ([]AuditLogItemModel, *http.Response, error) {
	return r.ApiService.GetOrganizationAuditlogsExecute(r)
}

/*
GetOrganizationAuditlogs List Audit log items for Organization

This endpoint returns the list of Audit log items for a given Organization 
and the result can be optionally filtered by Product and/or Config and/or Environment.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationId The identifier of the Organization.
 @return AuditLogsAPIGetOrganizationAuditlogsRequest
*/
func (a *AuditLogsAPIService) GetOrganizationAuditlogs(ctx context.Context, organizationId string) AuditLogsAPIGetOrganizationAuditlogsRequest {
	return AuditLogsAPIGetOrganizationAuditlogsRequest{
		ApiService: a,
		ctx: ctx,
		organizationId: organizationId,
	}
}

// Execute executes the request
//  @return []AuditLogItemModel
func (a *AuditLogsAPIService) GetOrganizationAuditlogsExecute(r AuditLogsAPIGetOrganizationAuditlogsRequest) ([]AuditLogItemModel, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []AuditLogItemModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuditLogsAPIService.GetOrganizationAuditlogs")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/organizations/{organizationId}/auditlogs"
	localVarPath = strings.Replace(localVarPath, "{"+"organizationId"+"}", url.PathEscape(parameterValueToString(r.organizationId, "organizationId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.productId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "productId", r.productId, "")
	}
	if r.configId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "configId", r.configId, "")
	}
	if r.environmentId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "environmentId", r.environmentId, "")
	}
	if r.auditLogType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "auditLogType", r.auditLogType, "")
	}
	if r.fromUtcDateTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fromUtcDateTime", r.fromUtcDateTime, "")
	}
	if r.toUtcDateTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "toUtcDateTime", r.toUtcDateTime, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
