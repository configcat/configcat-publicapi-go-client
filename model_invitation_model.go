/*
ConfigCat Public Management API

The purpose of this API is to access the ConfigCat platform programmatically. You can **Create**, **Read**, **Update** and **Delete** any entities like **Feature Flags, Configs, Environments** or **Products** within ConfigCat.  **Base API URL**: https://test-api.configcat.com  If you prefer the swagger documentation, you can find it here: [Swagger UI](https://test-api.configcat.com/swagger).  The API is based on HTTP REST, uses resource-oriented URLs, status codes and supports JSON  format. Do not use this API for accessing and evaluating feature flag values. Use the [SDKs instead](https://configcat.com/docs/sdk-reference/overview).   # OpenAPI Specification  The complete specification is publicly available in the following formats:  - [OpenAPI v3](https://test-api.configcat.com/docs/v1/swagger.json) - [Swagger v2](https://test-api.configcat.com/docs/v1/swagger.v2.json)  You can use it to generate client libraries in various languages with [OpenAPI Generator](https://github.com/OpenAPITools/openapi-generator) or [Swagger Codegen](https://swagger.io/tools/swagger-codegen/) to interact with this API.  # Authentication This API uses the [Basic HTTP Authentication Scheme](https://en.wikipedia.org/wiki/Basic_access_authentication).   <!-- ReDoc-Inject: <security-definitions> -->  # Throttling and rate limits All the rate limited API calls are returning information about the current rate limit period in the following HTTP headers:  | Header | Description | | :- | :- | | X-Rate-Limit-Remaining | The maximum number of requests remaining in the current rate limit period. | | X-Rate-Limit-Reset     | The time when the current rate limit period resets.        |  When the rate limit is exceeded by a request, the API returns with a `HTTP 429 - Too many requests` status along with a `Retry-After` HTTP header. 

API version: v1
Contact: support@configcat.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configcatpublicapi

import (
	"encoding/json"
	"time"
)

// checks if the InvitationModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InvitationModel{}

// InvitationModel struct for InvitationModel
type InvitationModel struct {
	// The identifier of the Invitation.
	InvitationId *string `json:"invitationId,omitempty"`
	// The invited user's email address.
	Email NullableString `json:"email,omitempty"`
	// The identifier of the Permission Group the user was invited to.
	PermissionGroupId *int64 `json:"permissionGroupId,omitempty"`
	// Creation time of the Invitation.
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	// Determines whether the Invitation is expired.
	Expired *bool `json:"expired,omitempty"`
}

// NewInvitationModel instantiates a new InvitationModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInvitationModel() *InvitationModel {
	this := InvitationModel{}
	return &this
}

// NewInvitationModelWithDefaults instantiates a new InvitationModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInvitationModelWithDefaults() *InvitationModel {
	this := InvitationModel{}
	return &this
}

// GetInvitationId returns the InvitationId field value if set, zero value otherwise.
func (o *InvitationModel) GetInvitationId() string {
	if o == nil || IsNil(o.InvitationId) {
		var ret string
		return ret
	}
	return *o.InvitationId
}

// GetInvitationIdOk returns a tuple with the InvitationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvitationModel) GetInvitationIdOk() (*string, bool) {
	if o == nil || IsNil(o.InvitationId) {
		return nil, false
	}
	return o.InvitationId, true
}

// HasInvitationId returns a boolean if a field has been set.
func (o *InvitationModel) HasInvitationId() bool {
	if o != nil && !IsNil(o.InvitationId) {
		return true
	}

	return false
}

// SetInvitationId gets a reference to the given string and assigns it to the InvitationId field.
func (o *InvitationModel) SetInvitationId(v string) {
	o.InvitationId = &v
}

// GetEmail returns the Email field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InvitationModel) GetEmail() string {
	if o == nil || IsNil(o.Email.Get()) {
		var ret string
		return ret
	}
	return *o.Email.Get()
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InvitationModel) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Email.Get(), o.Email.IsSet()
}

// HasEmail returns a boolean if a field has been set.
func (o *InvitationModel) HasEmail() bool {
	if o != nil && o.Email.IsSet() {
		return true
	}

	return false
}

// SetEmail gets a reference to the given NullableString and assigns it to the Email field.
func (o *InvitationModel) SetEmail(v string) {
	o.Email.Set(&v)
}
// SetEmailNil sets the value for Email to be an explicit nil
func (o *InvitationModel) SetEmailNil() {
	o.Email.Set(nil)
}

// UnsetEmail ensures that no value is present for Email, not even an explicit nil
func (o *InvitationModel) UnsetEmail() {
	o.Email.Unset()
}

// GetPermissionGroupId returns the PermissionGroupId field value if set, zero value otherwise.
func (o *InvitationModel) GetPermissionGroupId() int64 {
	if o == nil || IsNil(o.PermissionGroupId) {
		var ret int64
		return ret
	}
	return *o.PermissionGroupId
}

// GetPermissionGroupIdOk returns a tuple with the PermissionGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvitationModel) GetPermissionGroupIdOk() (*int64, bool) {
	if o == nil || IsNil(o.PermissionGroupId) {
		return nil, false
	}
	return o.PermissionGroupId, true
}

// HasPermissionGroupId returns a boolean if a field has been set.
func (o *InvitationModel) HasPermissionGroupId() bool {
	if o != nil && !IsNil(o.PermissionGroupId) {
		return true
	}

	return false
}

// SetPermissionGroupId gets a reference to the given int64 and assigns it to the PermissionGroupId field.
func (o *InvitationModel) SetPermissionGroupId(v int64) {
	o.PermissionGroupId = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *InvitationModel) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvitationModel) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *InvitationModel) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *InvitationModel) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetExpired returns the Expired field value if set, zero value otherwise.
func (o *InvitationModel) GetExpired() bool {
	if o == nil || IsNil(o.Expired) {
		var ret bool
		return ret
	}
	return *o.Expired
}

// GetExpiredOk returns a tuple with the Expired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvitationModel) GetExpiredOk() (*bool, bool) {
	if o == nil || IsNil(o.Expired) {
		return nil, false
	}
	return o.Expired, true
}

// HasExpired returns a boolean if a field has been set.
func (o *InvitationModel) HasExpired() bool {
	if o != nil && !IsNil(o.Expired) {
		return true
	}

	return false
}

// SetExpired gets a reference to the given bool and assigns it to the Expired field.
func (o *InvitationModel) SetExpired(v bool) {
	o.Expired = &v
}

func (o InvitationModel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InvitationModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.InvitationId) {
		toSerialize["invitationId"] = o.InvitationId
	}
	if o.Email.IsSet() {
		toSerialize["email"] = o.Email.Get()
	}
	if !IsNil(o.PermissionGroupId) {
		toSerialize["permissionGroupId"] = o.PermissionGroupId
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !IsNil(o.Expired) {
		toSerialize["expired"] = o.Expired
	}
	return toSerialize, nil
}

type NullableInvitationModel struct {
	value *InvitationModel
	isSet bool
}

func (v NullableInvitationModel) Get() *InvitationModel {
	return v.value
}

func (v *NullableInvitationModel) Set(val *InvitationModel) {
	v.value = val
	v.isSet = true
}

func (v NullableInvitationModel) IsSet() bool {
	return v.isSet
}

func (v *NullableInvitationModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInvitationModel(val *InvitationModel) *NullableInvitationModel {
	return &NullableInvitationModel{value: val, isSet: true}
}

func (v NullableInvitationModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInvitationModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


