/*
ConfigCat Public Management API

The purpose of this API is to access the ConfigCat platform programmatically. You can **Create**, **Read**, **Update** and **Delete** any entities like **Feature Flags, Configs, Environments** or **Products** within ConfigCat.  **Base API URL**: https://test-api.configcat.com  If you prefer the swagger documentation, you can find it here: [Swagger UI](https://test-api.configcat.com/swagger).  The API is based on HTTP REST, uses resource-oriented URLs, status codes and supports JSON  format. Do not use this API for accessing and evaluating feature flag values. Use the [SDKs instead](https://configcat.com/docs/sdk-reference/overview).   # OpenAPI Specification  The complete specification is publicly available in the following formats:  - [OpenAPI v3](https://test-api.configcat.com/docs/v1/swagger.json) - [Swagger v2](https://test-api.configcat.com/docs/v1/swagger.v2.json)  You can use it to generate client libraries in various languages with [OpenAPI Generator](https://github.com/OpenAPITools/openapi-generator) or [Swagger Codegen](https://swagger.io/tools/swagger-codegen/) to interact with this API.  # Authentication This API uses the [Basic HTTP Authentication Scheme](https://en.wikipedia.org/wiki/Basic_access_authentication).   <!-- ReDoc-Inject: <security-definitions> -->  # Throttling and rate limits All the rate limited API calls are returning information about the current rate limit period in the following HTTP headers:  | Header | Description | | :- | :- | | X-Rate-Limit-Remaining | The maximum number of requests remaining in the current rate limit period. | | X-Rate-Limit-Reset     | The time when the current rate limit period resets.        |  When the rate limit is exceeded by a request, the API returns with a `HTTP 429 - Too many requests` status along with a `Retry-After` HTTP header. 

API version: v1
Contact: support@configcat.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configcatpublicapi

import (
	"encoding/json"
)

// checks if the CreateOrUpdateEnvironmentAccessModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateOrUpdateEnvironmentAccessModel{}

// CreateOrUpdateEnvironmentAccessModel struct for CreateOrUpdateEnvironmentAccessModel
type CreateOrUpdateEnvironmentAccessModel struct {
	// Identifier of the Environment.
	EnvironmentId *string `json:"environmentId,omitempty"`
	EnvironmentAccessType *EnvironmentAccessType `json:"environmentAccessType,omitempty"`
}

// NewCreateOrUpdateEnvironmentAccessModel instantiates a new CreateOrUpdateEnvironmentAccessModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateOrUpdateEnvironmentAccessModel() *CreateOrUpdateEnvironmentAccessModel {
	this := CreateOrUpdateEnvironmentAccessModel{}
	return &this
}

// NewCreateOrUpdateEnvironmentAccessModelWithDefaults instantiates a new CreateOrUpdateEnvironmentAccessModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateOrUpdateEnvironmentAccessModelWithDefaults() *CreateOrUpdateEnvironmentAccessModel {
	this := CreateOrUpdateEnvironmentAccessModel{}
	return &this
}

// GetEnvironmentId returns the EnvironmentId field value if set, zero value otherwise.
func (o *CreateOrUpdateEnvironmentAccessModel) GetEnvironmentId() string {
	if o == nil || IsNil(o.EnvironmentId) {
		var ret string
		return ret
	}
	return *o.EnvironmentId
}

// GetEnvironmentIdOk returns a tuple with the EnvironmentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateOrUpdateEnvironmentAccessModel) GetEnvironmentIdOk() (*string, bool) {
	if o == nil || IsNil(o.EnvironmentId) {
		return nil, false
	}
	return o.EnvironmentId, true
}

// HasEnvironmentId returns a boolean if a field has been set.
func (o *CreateOrUpdateEnvironmentAccessModel) HasEnvironmentId() bool {
	if o != nil && !IsNil(o.EnvironmentId) {
		return true
	}

	return false
}

// SetEnvironmentId gets a reference to the given string and assigns it to the EnvironmentId field.
func (o *CreateOrUpdateEnvironmentAccessModel) SetEnvironmentId(v string) {
	o.EnvironmentId = &v
}

// GetEnvironmentAccessType returns the EnvironmentAccessType field value if set, zero value otherwise.
func (o *CreateOrUpdateEnvironmentAccessModel) GetEnvironmentAccessType() EnvironmentAccessType {
	if o == nil || IsNil(o.EnvironmentAccessType) {
		var ret EnvironmentAccessType
		return ret
	}
	return *o.EnvironmentAccessType
}

// GetEnvironmentAccessTypeOk returns a tuple with the EnvironmentAccessType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateOrUpdateEnvironmentAccessModel) GetEnvironmentAccessTypeOk() (*EnvironmentAccessType, bool) {
	if o == nil || IsNil(o.EnvironmentAccessType) {
		return nil, false
	}
	return o.EnvironmentAccessType, true
}

// HasEnvironmentAccessType returns a boolean if a field has been set.
func (o *CreateOrUpdateEnvironmentAccessModel) HasEnvironmentAccessType() bool {
	if o != nil && !IsNil(o.EnvironmentAccessType) {
		return true
	}

	return false
}

// SetEnvironmentAccessType gets a reference to the given EnvironmentAccessType and assigns it to the EnvironmentAccessType field.
func (o *CreateOrUpdateEnvironmentAccessModel) SetEnvironmentAccessType(v EnvironmentAccessType) {
	o.EnvironmentAccessType = &v
}

func (o CreateOrUpdateEnvironmentAccessModel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateOrUpdateEnvironmentAccessModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EnvironmentId) {
		toSerialize["environmentId"] = o.EnvironmentId
	}
	if !IsNil(o.EnvironmentAccessType) {
		toSerialize["environmentAccessType"] = o.EnvironmentAccessType
	}
	return toSerialize, nil
}

type NullableCreateOrUpdateEnvironmentAccessModel struct {
	value *CreateOrUpdateEnvironmentAccessModel
	isSet bool
}

func (v NullableCreateOrUpdateEnvironmentAccessModel) Get() *CreateOrUpdateEnvironmentAccessModel {
	return v.value
}

func (v *NullableCreateOrUpdateEnvironmentAccessModel) Set(val *CreateOrUpdateEnvironmentAccessModel) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateOrUpdateEnvironmentAccessModel) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateOrUpdateEnvironmentAccessModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateOrUpdateEnvironmentAccessModel(val *CreateOrUpdateEnvironmentAccessModel) *NullableCreateOrUpdateEnvironmentAccessModel {
	return &NullableCreateOrUpdateEnvironmentAccessModel{value: val, isSet: true}
}

func (v NullableCreateOrUpdateEnvironmentAccessModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateOrUpdateEnvironmentAccessModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


