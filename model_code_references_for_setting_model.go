/*
ConfigCat Public Management API

**Base API URL**: https://test-api.configcat.com  If you prefer the swagger documentation, you can find it here: [Swagger UI](https://test-api.configcat.com/swagger).  The purpose of this API is to access the ConfigCat platform programmatically.  You can **Create**, **Read**, **Update** and **Delete** any entities like **Feature Flags, Configs, Environments** or **Products** within ConfigCat.   The API is based on HTTP REST, uses resource-oriented URLs, status codes and supports JSON  and JSON+HAL format. Do not use this API for accessing and evaluating feature flag values. Use the [SDKs instead](https://configcat.com/docs/sdk-reference/overview).   # OpenAPI Specification  The complete specification is publicly available in the following formats:  - [OpenAPI v3](https://test-api.configcat.com/docs/v1/swagger.json) - [Swagger v2](https://test-api.configcat.com/docs/v1/swagger.v2.json)  You can use it to generate client libraries in various languages with [OpenAPI Generator](https://github.com/OpenAPITools/openapi-generator) or [Swagger Codegen](https://swagger.io/tools/swagger-codegen/) to interact with this API.  # Authentication This API uses the [Basic HTTP Authentication Scheme](https://en.wikipedia.org/wiki/Basic_access_authentication).   <!-- ReDoc-Inject: <security-definitions> -->  # Throttling and rate limits All the rate limited API calls are returning information about the current rate limit period in the following HTTP headers:  | Header | Description | | :- | :- | | X-Rate-Limit-Remaining | The maximum number of requests remaining in the current rate limit period. | | X-Rate-Limit-Reset     | The time when the current rate limit period resets.        |  When the rate limit is exceeded by a request, the API returns with a `HTTP 429 - Too many requests` status along with a `Retry-After` HTTP header. 

API version: v1
Contact: support@configcat.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configcatpublicapi

import (
	"encoding/json"
)

// checks if the CodeReferencesForSettingModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CodeReferencesForSettingModel{}

// CodeReferencesForSettingModel struct for CodeReferencesForSettingModel
type CodeReferencesForSettingModel struct {
	Setting *SettingModel `json:"setting,omitempty"`
	// List of Code references that belongs to the Feature Flag or Setting.
	CodeReferences []CodeReferenceModel `json:"codeReferences,omitempty"`
}

// NewCodeReferencesForSettingModel instantiates a new CodeReferencesForSettingModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCodeReferencesForSettingModel() *CodeReferencesForSettingModel {
	this := CodeReferencesForSettingModel{}
	return &this
}

// NewCodeReferencesForSettingModelWithDefaults instantiates a new CodeReferencesForSettingModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCodeReferencesForSettingModelWithDefaults() *CodeReferencesForSettingModel {
	this := CodeReferencesForSettingModel{}
	return &this
}

// GetSetting returns the Setting field value if set, zero value otherwise.
func (o *CodeReferencesForSettingModel) GetSetting() SettingModel {
	if o == nil || IsNil(o.Setting) {
		var ret SettingModel
		return ret
	}
	return *o.Setting
}

// GetSettingOk returns a tuple with the Setting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CodeReferencesForSettingModel) GetSettingOk() (*SettingModel, bool) {
	if o == nil || IsNil(o.Setting) {
		return nil, false
	}
	return o.Setting, true
}

// HasSetting returns a boolean if a field has been set.
func (o *CodeReferencesForSettingModel) HasSetting() bool {
	if o != nil && !IsNil(o.Setting) {
		return true
	}

	return false
}

// SetSetting gets a reference to the given SettingModel and assigns it to the Setting field.
func (o *CodeReferencesForSettingModel) SetSetting(v SettingModel) {
	o.Setting = &v
}

// GetCodeReferences returns the CodeReferences field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CodeReferencesForSettingModel) GetCodeReferences() []CodeReferenceModel {
	if o == nil {
		var ret []CodeReferenceModel
		return ret
	}
	return o.CodeReferences
}

// GetCodeReferencesOk returns a tuple with the CodeReferences field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CodeReferencesForSettingModel) GetCodeReferencesOk() ([]CodeReferenceModel, bool) {
	if o == nil || IsNil(o.CodeReferences) {
		return nil, false
	}
	return o.CodeReferences, true
}

// HasCodeReferences returns a boolean if a field has been set.
func (o *CodeReferencesForSettingModel) HasCodeReferences() bool {
	if o != nil && IsNil(o.CodeReferences) {
		return true
	}

	return false
}

// SetCodeReferences gets a reference to the given []CodeReferenceModel and assigns it to the CodeReferences field.
func (o *CodeReferencesForSettingModel) SetCodeReferences(v []CodeReferenceModel) {
	o.CodeReferences = v
}

func (o CodeReferencesForSettingModel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CodeReferencesForSettingModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Setting) {
		toSerialize["setting"] = o.Setting
	}
	if o.CodeReferences != nil {
		toSerialize["codeReferences"] = o.CodeReferences
	}
	return toSerialize, nil
}

type NullableCodeReferencesForSettingModel struct {
	value *CodeReferencesForSettingModel
	isSet bool
}

func (v NullableCodeReferencesForSettingModel) Get() *CodeReferencesForSettingModel {
	return v.value
}

func (v *NullableCodeReferencesForSettingModel) Set(val *CodeReferencesForSettingModel) {
	v.value = val
	v.isSet = true
}

func (v NullableCodeReferencesForSettingModel) IsSet() bool {
	return v.isSet
}

func (v *NullableCodeReferencesForSettingModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCodeReferencesForSettingModel(val *CodeReferencesForSettingModel) *NullableCodeReferencesForSettingModel {
	return &NullableCodeReferencesForSettingModel{value: val, isSet: true}
}

func (v NullableCodeReferencesForSettingModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCodeReferencesForSettingModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


