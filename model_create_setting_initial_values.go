/*
ConfigCat Public Management API

The purpose of this API is to access the ConfigCat platform programmatically. You can **Create**, **Read**, **Update** and **Delete** any entities like **Feature Flags, Configs, Environments** or **Products** within ConfigCat.  **Base API URL**: https://api.configcat.com  If you prefer the swagger documentation, you can find it here: [Swagger UI](https://api.configcat.com/swagger).  The API is based on HTTP REST, uses resource-oriented URLs, status codes and supports JSON  format.   **Important:** Do not use this API for accessing and evaluating feature flag values. Use the [SDKs](https://configcat.com/docs/sdk-reference/overview) or the [ConfigCat Proxy](https://configcat.com/docs/advanced/proxy/proxy-overview/) instead.  # OpenAPI Specification  The complete specification is publicly available in the following formats:  - [OpenAPI v3](https://api.configcat.com/docs/v1/swagger.json) - [Swagger v2](https://api.configcat.com/docs/v1/swagger.v2.json)  You can use it to generate client libraries in various languages with [OpenAPI Generator](https://github.com/OpenAPITools/openapi-generator) or [Swagger Codegen](https://swagger.io/tools/swagger-codegen/) to interact with this API.  # Authentication This API uses the [Basic HTTP Authentication Scheme](https://en.wikipedia.org/wiki/Basic_access_authentication).   <!-- ReDoc-Inject: <security-definitions> -->  # Throttling and rate limits All the rate limited API calls are returning information about the current rate limit period in the following HTTP headers:  | Header | Description | | :- | :- | | X-Rate-Limit-Remaining | The maximum number of requests remaining in the current rate limit period. | | X-Rate-Limit-Reset     | The time when the current rate limit period resets.        |  When the rate limit is exceeded by a request, the API returns with a `HTTP 429 - Too many requests` status along with a `Retry-After` HTTP header. 

API version: v1
Contact: support@configcat.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configcatpublicapi

import (
	"encoding/json"
)

// checks if the CreateSettingInitialValues type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateSettingInitialValues{}

// CreateSettingInitialValues struct for CreateSettingInitialValues
type CreateSettingInitialValues struct {
	// A short description for the setting, shown on the Dashboard UI.
	Hint NullableString `json:"hint,omitempty"`
	// The IDs of the tags which are attached to the setting.
	Tags []int64 `json:"tags,omitempty"`
	// The order of the Setting represented on the ConfigCat Dashboard.  Determined from an ascending sequence of integers.
	Order NullableInt32 `json:"order,omitempty"`
	// The key of the Feature Flag or Setting.
	Key string `json:"key"`
	// The name of the Feature Flag or Setting.
	Name string `json:"name"`
	// The type of the Feature Flag or Setting.
	SettingType string `json:"settingType"`
	// Optional, initial value of the Feature Flag or Setting in the given Environments.
	InitialValues []InitialValue `json:"initialValues,omitempty"`
}

// NewCreateSettingInitialValues instantiates a new CreateSettingInitialValues object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateSettingInitialValues(key string, name string, settingType string) *CreateSettingInitialValues {
	this := CreateSettingInitialValues{}
	this.Key = key
	this.Name = name
	this.SettingType = settingType
	return &this
}

// NewCreateSettingInitialValuesWithDefaults instantiates a new CreateSettingInitialValues object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateSettingInitialValuesWithDefaults() *CreateSettingInitialValues {
	this := CreateSettingInitialValues{}
	return &this
}

// GetHint returns the Hint field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateSettingInitialValues) GetHint() string {
	if o == nil || IsNil(o.Hint.Get()) {
		var ret string
		return ret
	}
	return *o.Hint.Get()
}

// GetHintOk returns a tuple with the Hint field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateSettingInitialValues) GetHintOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Hint.Get(), o.Hint.IsSet()
}

// HasHint returns a boolean if a field has been set.
func (o *CreateSettingInitialValues) HasHint() bool {
	if o != nil && o.Hint.IsSet() {
		return true
	}

	return false
}

// SetHint gets a reference to the given NullableString and assigns it to the Hint field.
func (o *CreateSettingInitialValues) SetHint(v string) {
	o.Hint.Set(&v)
}
// SetHintNil sets the value for Hint to be an explicit nil
func (o *CreateSettingInitialValues) SetHintNil() {
	o.Hint.Set(nil)
}

// UnsetHint ensures that no value is present for Hint, not even an explicit nil
func (o *CreateSettingInitialValues) UnsetHint() {
	o.Hint.Unset()
}

// GetTags returns the Tags field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateSettingInitialValues) GetTags() []int64 {
	if o == nil {
		var ret []int64
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateSettingInitialValues) GetTagsOk() ([]int64, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *CreateSettingInitialValues) HasTags() bool {
	if o != nil && IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []int64 and assigns it to the Tags field.
func (o *CreateSettingInitialValues) SetTags(v []int64) {
	o.Tags = v
}

// GetOrder returns the Order field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateSettingInitialValues) GetOrder() int32 {
	if o == nil || IsNil(o.Order.Get()) {
		var ret int32
		return ret
	}
	return *o.Order.Get()
}

// GetOrderOk returns a tuple with the Order field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateSettingInitialValues) GetOrderOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Order.Get(), o.Order.IsSet()
}

// HasOrder returns a boolean if a field has been set.
func (o *CreateSettingInitialValues) HasOrder() bool {
	if o != nil && o.Order.IsSet() {
		return true
	}

	return false
}

// SetOrder gets a reference to the given NullableInt32 and assigns it to the Order field.
func (o *CreateSettingInitialValues) SetOrder(v int32) {
	o.Order.Set(&v)
}
// SetOrderNil sets the value for Order to be an explicit nil
func (o *CreateSettingInitialValues) SetOrderNil() {
	o.Order.Set(nil)
}

// UnsetOrder ensures that no value is present for Order, not even an explicit nil
func (o *CreateSettingInitialValues) UnsetOrder() {
	o.Order.Unset()
}

// GetKey returns the Key field value
func (o *CreateSettingInitialValues) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *CreateSettingInitialValues) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *CreateSettingInitialValues) SetKey(v string) {
	o.Key = v
}

// GetName returns the Name field value
func (o *CreateSettingInitialValues) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateSettingInitialValues) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreateSettingInitialValues) SetName(v string) {
	o.Name = v
}

// GetSettingType returns the SettingType field value
func (o *CreateSettingInitialValues) GetSettingType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SettingType
}

// GetSettingTypeOk returns a tuple with the SettingType field value
// and a boolean to check if the value has been set.
func (o *CreateSettingInitialValues) GetSettingTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SettingType, true
}

// SetSettingType sets field value
func (o *CreateSettingInitialValues) SetSettingType(v string) {
	o.SettingType = v
}

// GetInitialValues returns the InitialValues field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateSettingInitialValues) GetInitialValues() []InitialValue {
	if o == nil {
		var ret []InitialValue
		return ret
	}
	return o.InitialValues
}

// GetInitialValuesOk returns a tuple with the InitialValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateSettingInitialValues) GetInitialValuesOk() ([]InitialValue, bool) {
	if o == nil || IsNil(o.InitialValues) {
		return nil, false
	}
	return o.InitialValues, true
}

// HasInitialValues returns a boolean if a field has been set.
func (o *CreateSettingInitialValues) HasInitialValues() bool {
	if o != nil && IsNil(o.InitialValues) {
		return true
	}

	return false
}

// SetInitialValues gets a reference to the given []InitialValue and assigns it to the InitialValues field.
func (o *CreateSettingInitialValues) SetInitialValues(v []InitialValue) {
	o.InitialValues = v
}

func (o CreateSettingInitialValues) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateSettingInitialValues) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Hint.IsSet() {
		toSerialize["hint"] = o.Hint.Get()
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	if o.Order.IsSet() {
		toSerialize["order"] = o.Order.Get()
	}
	toSerialize["key"] = o.Key
	toSerialize["name"] = o.Name
	toSerialize["settingType"] = o.SettingType
	if o.InitialValues != nil {
		toSerialize["initialValues"] = o.InitialValues
	}
	return toSerialize, nil
}

type NullableCreateSettingInitialValues struct {
	value *CreateSettingInitialValues
	isSet bool
}

func (v NullableCreateSettingInitialValues) Get() *CreateSettingInitialValues {
	return v.value
}

func (v *NullableCreateSettingInitialValues) Set(val *CreateSettingInitialValues) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateSettingInitialValues) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateSettingInitialValues) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateSettingInitialValues(val *CreateSettingInitialValues) *NullableCreateSettingInitialValues {
	return &NullableCreateSettingInitialValues{value: val, isSet: true}
}

func (v NullableCreateSettingInitialValues) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateSettingInitialValues) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


