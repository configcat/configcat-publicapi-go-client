/*
ConfigCat Public Management API

**Base API URL**: https://api.configcat.com  If you prefer the swagger documentation, you can find it here: [Swagger UI](https://api.configcat.com/swagger).  The purpose of this API is to access the ConfigCat platform programmatically.  You can **Create**, **Read**, **Update** and **Delete** any entities like **Feature Flags, Configs, Environments** or **Products** within ConfigCat.   The API is based on HTTP REST, uses resource-oriented URLs, status codes and supports JSON  and JSON+HAL format. Do not use this API for accessing and evaluating feature flag values. Use the [SDKs instead](https://configcat.com/docs/sdk-reference/overview).   # OpenAPI Specification  The complete specification is publicly available here: [swagger.json](v1/swagger.json).  You can use it to generate client libraries in various languages with [OpenAPI Generator](https://github.com/OpenAPITools/openapi-generator) or [Swagger Codegen](https://swagger.io/tools/swagger-codegen/) to interact with this API.  # Authentication This API uses the [Basic HTTP Authentication Scheme](https://en.wikipedia.org/wiki/Basic_access_authentication).   <!-- ReDoc-Inject: <security-definitions> -->  # Throttling and rate limits All the rate limited API calls are returning information about the current rate limit period in the following HTTP headers:  | Header | Description | | :- | :- | | X-Rate-Limit-Remaining | The maximum number of requests remaining in the current rate limit period. | | X-Rate-Limit-Reset     | The time when the current rate limit period resets.        |  When the rate limit is exceeded by a request, the API returns with a `HTTP 429 - Too many requests` status along with a `Retry-After` HTTP header. 

API version: v1
Contact: support@configcat.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configcatpublicapi

import (
	"encoding/json"
)

// checks if the DeleteIntegrationLinkModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeleteIntegrationLinkModel{}

// DeleteIntegrationLinkModel struct for DeleteIntegrationLinkModel
type DeleteIntegrationLinkModel struct {
	HasRemainingIntegrationLink *bool `json:"hasRemainingIntegrationLink,omitempty"`
}

// NewDeleteIntegrationLinkModel instantiates a new DeleteIntegrationLinkModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeleteIntegrationLinkModel() *DeleteIntegrationLinkModel {
	this := DeleteIntegrationLinkModel{}
	return &this
}

// NewDeleteIntegrationLinkModelWithDefaults instantiates a new DeleteIntegrationLinkModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeleteIntegrationLinkModelWithDefaults() *DeleteIntegrationLinkModel {
	this := DeleteIntegrationLinkModel{}
	return &this
}

// GetHasRemainingIntegrationLink returns the HasRemainingIntegrationLink field value if set, zero value otherwise.
func (o *DeleteIntegrationLinkModel) GetHasRemainingIntegrationLink() bool {
	if o == nil || IsNil(o.HasRemainingIntegrationLink) {
		var ret bool
		return ret
	}
	return *o.HasRemainingIntegrationLink
}

// GetHasRemainingIntegrationLinkOk returns a tuple with the HasRemainingIntegrationLink field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeleteIntegrationLinkModel) GetHasRemainingIntegrationLinkOk() (*bool, bool) {
	if o == nil || IsNil(o.HasRemainingIntegrationLink) {
		return nil, false
	}
	return o.HasRemainingIntegrationLink, true
}

// HasHasRemainingIntegrationLink returns a boolean if a field has been set.
func (o *DeleteIntegrationLinkModel) HasHasRemainingIntegrationLink() bool {
	if o != nil && !IsNil(o.HasRemainingIntegrationLink) {
		return true
	}

	return false
}

// SetHasRemainingIntegrationLink gets a reference to the given bool and assigns it to the HasRemainingIntegrationLink field.
func (o *DeleteIntegrationLinkModel) SetHasRemainingIntegrationLink(v bool) {
	o.HasRemainingIntegrationLink = &v
}

func (o DeleteIntegrationLinkModel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeleteIntegrationLinkModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HasRemainingIntegrationLink) {
		toSerialize["hasRemainingIntegrationLink"] = o.HasRemainingIntegrationLink
	}
	return toSerialize, nil
}

type NullableDeleteIntegrationLinkModel struct {
	value *DeleteIntegrationLinkModel
	isSet bool
}

func (v NullableDeleteIntegrationLinkModel) Get() *DeleteIntegrationLinkModel {
	return v.value
}

func (v *NullableDeleteIntegrationLinkModel) Set(val *DeleteIntegrationLinkModel) {
	v.value = val
	v.isSet = true
}

func (v NullableDeleteIntegrationLinkModel) IsSet() bool {
	return v.isSet
}

func (v *NullableDeleteIntegrationLinkModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeleteIntegrationLinkModel(val *DeleteIntegrationLinkModel) *NullableDeleteIntegrationLinkModel {
	return &NullableDeleteIntegrationLinkModel{value: val, isSet: true}
}

func (v NullableDeleteIntegrationLinkModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeleteIntegrationLinkModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


